/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/GetUserIdentity': {
    /** Retrieve the current user's identity */
    post: operations['GetUserIdentity'];
  };
  '/ListAccounts': {
    /** List the accounts available to the current user */
    post: operations['ListAccounts'];
  };
  '/CreateAccount': {
    /** Create a new account */
    post: operations['CreateAccount'];
  };
  '/UpdateAccount': {
    /** Update account details */
    post: operations['UpdateAccount'];
  };
  '/{accountId}/CreateEnvironment': {
    /** Create a new environment */
    post: operations['CreateEnvironment'];
  };
  '/{accountId}/ListEnvironments': {
    /** Retrieve an account's environments */
    post: operations['ListEnvironments'];
  };
  '/{accountId}/DescribeEnvironment': {
    /** Retrieve an environment's details */
    post: operations['DescribeEnvironment'];
  };
  '/{accountId}/DestroyEnvironment': {
    /** Shut down an environment and destroy all its stored metadata and state */
    post: operations['DestroyEnvironment'];
  };
  '/{accountId}/CreateApiKey': {
    /** Create a new API key for the specified environment */
    post: operations['CreateApiKey'];
  };
  '/{accountId}/ListApiKeys': {
    /** List the known API keys for an environment */
    post: operations['ListApiKeys'];
  };
  '/{accountId}/DescribeApiKey': {
    /** Retrieve the details of a specific API key */
    post: operations['DescribeApiKey'];
  };
  '/{accountId}/DeleteApiKey': {
    /** Delete the specified API key */
    post: operations['DeleteApiKey'];
  };
  '/{accountId}/GetEnvironmentLogs': {
    /** Retrieve environments logs */
    post: operations['GetEnvironmentLogs'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    GetUserIdentityRequest: Record<string, never>;
    GetUserIdentityResponse: {
      userId: string;
    };
    ClientError: {
      code: number;
      message: string;
    };
    UnauthorizedError: {
      code: number;
      message: string;
    };
    ServerInternalError: {
      code: number;
      message: string;
    };
    ListAccountsRequest: Record<string, never>;
    ListAccountsResponse: {
      accounts: {
        accountId: string;
        description?: string;
      }[];
    };
    CreateAccountRequest: {
      description?: string;
    };
    CreateAccountResponse: {
      accountId: string;
    };
    UpdateAccountRequest: {
      accountId: string;
      description?: string | null;
    };
    UpdateAccountResponse: {
      accountId: string;
      description?: string;
    };
    /**
     * @description Unique account identifier
     * @example acc_1b2DE3f40
     */
    AccountId: string;
    CreateEnvironmentRequest: {
      description?: string;
    };
    CreateEnvironmentResponse: {
      environmentId: string;
    };
    ListEnvironmentsRequest: Record<string, never>;
    ListEnvironmentsResponse: {
      environments: {
        environmentId: string;
      }[];
    };
    DescribeEnvironmentRequest: {
      environmentId: string;
    };
    DescribeEnvironmentResponse: {
      environmentId: string;
      description?: string;
      /** @enum {string} */
      status: 'PENDING' | 'ACTIVE' | 'FAILED' | 'DELETED';
      signingPublicKey?: string;
      apiKeys: {
        keyId: string;
        environmentId: string;
      }[];
    };
    DestroyEnvironmentRequest: {
      environmentId: string;
    };
    DestroyEnvironmentResponse: {
      result?:
        | {
            ok: boolean;
          }
        | string;
    };
    CreateApiKeyRequest: {
      environmentId: string;
      roleId: components['schemas']['RoleId'];
      description?: string;
    };
    /**
     * @description A role identifier specifying a particular level of access for a principal.
     * @example rst:role::FullAccess
     * @enum {string}
     */
    RoleId:
      | 'rst:role::FullAccess'
      | 'rst:role::IngressAccess'
      | 'rst:role::AdminAccess'
      | 'rst:role::ResolveAwakeableAccess';
    CreateApiKeyResponse: {
      keyId: string;
      roleId: components['schemas']['RoleId'];
      environmentId: string;
      accountId: string;
      apiKey: string;
      /** @enum {string} */
      state: 'ACTIVE' | 'DELETED';
    };
    ListApiKeysRequest: {
      environmentId: string;
    };
    ListApiKeysResponse: {
      apiKeys: {
        keyId: string;
        environmentId: string;
      }[];
    };
    DescribeApiKeyRequest: {
      keyId: string;
      environmentId: string;
    };
    DescribeApiKeyResponse: {
      keyId: string;
      roleId: components['schemas']['RoleId'];
      environmentId: string;
      accountId: string;
      /** @enum {string} */
      state: 'ACTIVE' | 'DELETED';
      description?: string;
    };
    DeleteApiKeyRequest: {
      environmentId: string;
      keyId: string;
    };
    DeleteApiKeyResponse: {
      result?:
        | {
            ok: boolean;
          }
        | string;
    };
    GetEnvironmentLogsRequest: {
      environmentId: string;
      start: number;
      end: number;
    };
    GetEnvironmentLogsResponse: {
      lines: {
        unixNanos: string;
        line: string;
      }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Retrieve the current user's identity */
  GetUserIdentity: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['GetUserIdentityRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['GetUserIdentityResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** List the accounts available to the current user */
  ListAccounts: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['ListAccountsRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['ListAccountsResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Create a new account */
  CreateAccount: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateAccountRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['CreateAccountResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Update account details */
  UpdateAccount: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAccountRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['UpdateAccountResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Create a new environment */
  CreateEnvironment: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateEnvironmentRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['CreateEnvironmentResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Retrieve an account's environments */
  ListEnvironments: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ListEnvironmentsRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['ListEnvironmentsResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Retrieve an environment's details */
  DescribeEnvironment: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DescribeEnvironmentRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['DescribeEnvironmentResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Shut down an environment and destroy all its stored metadata and state */
  DestroyEnvironment: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DestroyEnvironmentRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['DestroyEnvironmentResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Create a new API key for the specified environment */
  CreateApiKey: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApiKeyRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['CreateApiKeyResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** List the known API keys for an environment */
  ListApiKeys: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ListApiKeysRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['ListApiKeysResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Retrieve the details of a specific API key */
  DescribeApiKey: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DescribeApiKeyRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['DescribeApiKeyResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Delete the specified API key */
  DeleteApiKey: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteApiKeyRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['DeleteApiKeyResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
  /** Retrieve environments logs */
  GetEnvironmentLogs: {
    parameters: {
      path: {
        /** @description Unique account identifier */
        accountId: components['schemas']['AccountId'];
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetEnvironmentLogsRequest'];
      };
    };
    responses: {
      /** @description The operation completed successfully. */
      200: {
        content: {
          'application/json': components['schemas']['GetEnvironmentLogsResponse'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['ClientError'];
        };
      };
      /** @description The client has not provided a valid token for a principal authorized to make the requested operation. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedError'];
        };
      };
      /** @description Indicates a failure on the service-side. Generally this type of error is retryable. */
      500: {
        content: {
          'application/json': components['schemas']['ServerInternalError'];
        };
      };
    };
  };
}
