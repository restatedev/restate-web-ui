openapi: '3.0.2'
info:
  title: Restate Cloud API
  version: '1.0'
  license:
    name: Restate
    url: https://restate.dev
servers:
  - url: https://api.dev.restate.cloud
paths:
  /cloud/GetUserIdentity:
    post:
      summary: Returns the user identity
      operationId: getUserIdentity
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserIdentityResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/CreateAccount:
    post:
      summary: Creates a cloud account
      operationId: createAccount
      security:
        - bearerAuth: []
      requestBody:
        description: Specify the description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/ListAccounts:
    post:
      summary: returns all cloud accounts the user has access to
      operationId: listAccounts
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/CreateEnvironment:
    post:
      summary: Creates an environment
      operationId: createEnvironment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEnvironmentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/DescribeEnvironment:
    post:
      summary: Returns the environments details
      operationId: describeEnvironment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the environment id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeEnvironmentRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeEnvironmentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/DestroyEnvironment:
    post:
      summary: Destroys an environment
      operationId: destroyEnvironment
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the environment id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroyEnvironmentRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestroyEnvironmentResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/ListEnvironments:
    post:
      summary: Returns all the environments for an account
      operationId: listEnvironments
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnvironmentsResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/CreateApiKey:
    post:
      summary: Creates an api key on an environment with the specified role
      operationId: createApiKey
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the role and environment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/DescribeApiKey:
    post:
      summary: Returns the api key details
      operationId: describeApiKey
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the api key
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeApiKeyRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeApiKeyResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/DeleteApiKey:
    post:
      summary: Deletes the api key
      operationId: deleteApiKey
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the api key and environment id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApiKeyRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
  /cloud/{accountId}/ListApiKeys:
    post:
      summary: Returns all the api keys
      operationId: listApiKeys
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountId'
      requestBody:
        description: Specify the environment id
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApiKeysRequestBody'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    GetUserIdentityResponse:
      $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: The user id
    Account:
      type: object
      required:
        - accountId
      properties:
        accountId:
          type: string
          description: The account id
        description:
          type: string
          description: The account description
    EnvironmentId:
      type: object
      required:
        - environmentId
      properties:
        environmentId:
          type: string
          description: The environment id
    Environment:
      allOf:
        - $ref: '#/components/schemas/EnvironmentId'
        - type: object
          required:
            - environmentId
          properties:
            description:
              type: string
              description: The environment description
            status:
              type: string
              description: The environment status
              enum:
                [
                  'PROVISIONING_NEW',
                  'PROVISIONING_CREATING',
                  'PROVISIONING_READY',
                  'PROVISIONING_SHUTTING_DOWN',
                  'PROVISIONING_DELETED',
                  'PROVISIONING_FAILED',
                  'UNRECOGNIZED',
                ]
    CreateAccountResponse:
      $ref: '#/components/schemas/Account'
    CreateAccountRequestBody:
      type: object
      properties:
        description:
          type: string
          description: The account description
    ListAccountsResponse:
      type: object
      required:
        - accounts
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    CreateEnvironmentRequestBody:
      type: object
      properties:
        description:
          type: string
          description: The account description
    CreateEnvironmentResponse:
      $ref: '#/components/schemas/EnvironmentId'
    DestroyEnvironmentRequestBody:
      $ref: '#/components/schemas/EnvironmentId'
    DestroyEnvironmentResponse:
      type: object
      properties:
        error:
          type: string
    DescribeEnvironmentRequestBody:
      $ref: '#/components/schemas/EnvironmentId'
    DescribeEnvironmentResponse:
      $ref: '#/components/schemas/Environment'
    ListEnvironmentsResponse:
      type: object
      required:
        - environments
      properties:
        environments:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentId'
    Role:
      type: string
      enum:
        [
          'rst:role::FullAccess',
          'rst:role::IngressAccess',
          'rst:role::AdminAccess',
          'rst:role::ResolveAwakeableAccess',
        ]
    ApiKeyState:
      type: string
      enum:
        ['KEY_NEW', 'KEY_ACTIVE', 'KEY_DISABLED', 'KEY_DELETED', 'UNRECOGNIZED']
    CreateApiKeyRequestBody:
      type: object
      required:
        - roleId
        - environmentId
      properties:
        roleId:
          $ref: '#/components/schemas/Role'
        environmentId:
          type: string
        description:
          type: string
          description: The environment description
    CreateApiKeyResponse:
      type: object
      required:
        - roleId
        - environmentId
        - state
        - accountId
        - apiKey
      properties:
        keyId:
          type: string
        environmentId:
          type: string
        roleId:
          $ref: '#/components/schemas/Role'
        state:
          $ref: '#/components/schemas/ApiKeyState'
        accountId:
          type: string
        apiKey:
          type: string
    DescribeApiKeyRequestBody:
      type: object
      required:
        - keyId
        - environmentId
      properties:
        keyId:
          type: string
        environmentId:
          type: string
    DescribeApiKeyResponse:
      type: object
      required:
        - roleId
        - environmentId
        - state
        - accountId
        - keyId
      properties:
        keyId:
          type: string
        environmentId:
          type: string
        roleId:
          $ref: '#/components/schemas/Role'
        state:
          $ref: '#/components/schemas/ApiKeyState'
        accountId:
          type: string
        description:
          type: string
    DeleteApiKeyRequestBody:
      type: object
      required:
        - keyId
        - environmentId
      properties:
        keyId:
          type: string
        environmentId:
          type: string
    DeleteApiKeyResponse:
      type: object
      properties:
        error:
          type: string
    ListApiKeysRequestBody:
      type: object
      required:
        - environmentId
      properties:
        environmentId:
          type: string
    ListApiKeysResponse:
      type: object
      properties:
        apiKeys:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyListEntry'
    ApiKeyListEntry:
      type: object
      required:
        - keyId
        - environmentId
      properties:
        keyId:
          type: string
        environmentId:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    InternalServerError:
      description: Access token is missing or invalid
      content:
        text/plain:
          schema:
            type: string
  parameters:
    AccountId:
      name: accountId
      in: path
      description: The account id
      required: true
      schema:
        type: string
