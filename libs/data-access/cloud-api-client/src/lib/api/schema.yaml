openapi: 3.0.3
info:
  title: Restate Cloud API
  version: v1
servers:
  - url: https://api.dev.restate.cloud/cloud
    description: Dev Endpoint
security:
  - bearerAuth: []
paths:
  /GetUserIdentity:
    post:
      operationId: GetUserIdentity
      summary: Retrieve the current user's identity
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserIdentityRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserIdentityResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /ListAccounts:
    post:
      operationId: ListAccounts
      summary: List the accounts available to the current user
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAccountsRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountsResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /CreateAccount:
    post:
      operationId: CreateAccount
      summary: Create a new account
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAccountResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /UpdateAccount:
    post:
      operationId: UpdateAccount
      summary: Update account details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccountResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/CreateEnvironment:
    post:
      operationId: CreateEnvironment
      summary: Create a new environment
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEnvironmentResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/ListEnvironments:
    post:
      operationId: ListEnvironments
      summary: Retrieve an account's environments
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListEnvironmentsRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnvironmentsResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/DescribeEnvironment:
    post:
      operationId: DescribeEnvironment
      summary: Retrieve an environment's details
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeEnvironmentRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeEnvironmentResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/DestroyEnvironment:
    post:
      operationId: DestroyEnvironment
      summary: Shut down an environment and destroy all its stored metadata and state
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestroyEnvironmentRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestroyEnvironmentResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/CreateApiKey:
    post:
      operationId: CreateApiKey
      summary: Create a new API key for the specified environment
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/ListApiKeys:
    post:
      operationId: ListApiKeys
      summary: List the known API keys for an environment
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListApiKeysRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/DescribeApiKey:
    post:
      operationId: DescribeApiKey
      summary: Retrieve the details of a specific API key
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeApiKeyRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeApiKeyResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/DeleteApiKey:
    post:
      operationId: DeleteApiKey
      summary: Delete the specified API key
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApiKeyRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
  /{accountId}/GetEnvironmentLogs:
    post:
      operationId: GetEnvironmentLogs
      summary: Retrieve environments logs
      parameters:
        - in: path
          name: accountId
          description: Unique account identifier
          schema:
            $ref: '#/components/schemas/AccountId'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEnvironmentLogsRequest'
      responses:
        '200':
          description: The operation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEnvironmentLogsResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '401':
          description: The client has not provided a valid token for a principal
            authorized to make the requested operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description:
            Indicates a failure on the service-side. Generally this type of
            error is retryable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInternalError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: An access token from the Cloud user authentication service
  schemas:
    GetUserIdentityRequest:
      type: object
    GetUserIdentityResponse:
      type: object
      properties:
        userId:
          type: string
      required:
        - userId
    ClientError:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required:
        - code
        - message
    UnauthorizedError:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required:
        - code
        - message
    ServerInternalError:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
      required:
        - code
        - message
    ListAccountsRequest:
      type: object
    ListAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            type: object
            properties:
              accountId:
                type: string
              description:
                type: string
            required:
              - accountId
      required:
        - accounts
    CreateAccountRequest:
      type: object
      properties:
        description:
          type: string
    CreateAccountResponse:
      type: object
      properties:
        accountId:
          type: string
      required:
        - accountId
    UpdateAccountRequest:
      type: object
      properties:
        accountId:
          type: string
        description:
          type: string
          nullable: true
      required:
        - accountId
    UpdateAccountResponse:
      type: object
      properties:
        accountId:
          type: string
        description:
          type: string
      required:
        - accountId
    AccountId:
      type: string
      description: Unique account identifier
      example: acc_1b2DE3f40
    CreateEnvironmentRequest:
      type: object
      properties:
        description:
          type: string
    CreateEnvironmentResponse:
      type: object
      properties:
        environmentId:
          type: string
      required:
        - environmentId
    ListEnvironmentsRequest:
      type: object
    ListEnvironmentsResponse:
      type: object
      properties:
        environments:
          type: array
          items:
            type: object
            properties:
              environmentId:
                type: string
            required:
              - environmentId
      required:
        - environments
    DescribeEnvironmentRequest:
      type: object
      properties:
        environmentId:
          type: string
      required:
        - environmentId
    DescribeEnvironmentResponse:
      type: object
      properties:
        environmentId:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - PENDING
            - ACTIVE
            - FAILED
            - DELETED
        signingPublicKey:
          type: string
        apiKeys:
          type: array
          items:
            type: object
            properties:
              keyId:
                type: string
              environmentId:
                type: string
            required:
              - keyId
              - environmentId
      required:
        - environmentId
        - status
        - apiKeys
    DestroyEnvironmentRequest:
      type: object
      properties:
        environmentId:
          type: string
      required:
        - environmentId
    DestroyEnvironmentResponse:
      type: object
      properties:
        result:
          anyOf:
            - type: object
              properties:
                ok:
                  type: boolean
              required:
                - ok
            - type: string
    CreateApiKeyRequest:
      type: object
      properties:
        environmentId:
          type: string
        roleId:
          $ref: '#/components/schemas/RoleId'
        description:
          type: string
      required:
        - environmentId
        - roleId
    RoleId:
      type: string
      enum:
        - rst:role::FullAccess
        - rst:role::IngressAccess
        - rst:role::AdminAccess
        - rst:role::ResolveAwakeableAccess
      description:
        A role identifier specifying a particular level of access for a
        principal.
      example: rst:role::FullAccess
    CreateApiKeyResponse:
      type: object
      properties:
        keyId:
          type: string
        roleId:
          $ref: '#/components/schemas/RoleId'
        environmentId:
          type: string
        accountId:
          type: string
        apiKey:
          type: string
        state:
          type: string
          enum:
            - ACTIVE
            - DELETED
      required:
        - keyId
        - roleId
        - environmentId
        - accountId
        - apiKey
        - state
    ListApiKeysRequest:
      type: object
      properties:
        environmentId:
          type: string
      required:
        - environmentId
    ListApiKeysResponse:
      type: object
      properties:
        apiKeys:
          type: array
          items:
            type: object
            properties:
              keyId:
                type: string
              environmentId:
                type: string
            required:
              - keyId
              - environmentId
      required:
        - apiKeys
    DescribeApiKeyRequest:
      type: object
      properties:
        keyId:
          type: string
        environmentId:
          type: string
      required:
        - keyId
        - environmentId
    DescribeApiKeyResponse:
      type: object
      properties:
        keyId:
          type: string
        roleId:
          $ref: '#/components/schemas/RoleId'
        environmentId:
          type: string
        accountId:
          type: string
        state:
          type: string
          enum:
            - ACTIVE
            - DELETED
        description:
          type: string
      required:
        - keyId
        - roleId
        - environmentId
        - accountId
        - state
    DeleteApiKeyRequest:
      type: object
      properties:
        environmentId:
          type: string
        keyId:
          type: string
      required:
        - environmentId
        - keyId
    DeleteApiKeyResponse:
      type: object
      properties:
        result:
          anyOf:
            - type: object
              properties:
                ok:
                  type: boolean
              required:
                - ok
            - type: string
    GetEnvironmentLogsRequest:
      type: object
      properties:
        environmentId:
          type: string
        start:
          type: number
          minimum: 1700000000
          maximum: 2000000000
        end:
          type: number
          minimum: 1700000000
          maximum: 2000000000
      required:
        - environmentId
        - start
        - end
    GetEnvironmentLogsResponse:
      type: object
      properties:
        lines:
          type: array
          items:
            type: object
            properties:
              unixNanos:
                type: string
              line:
                type: string
            required:
              - unixNanos
              - line
      required:
        - lines
