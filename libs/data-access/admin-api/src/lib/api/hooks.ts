import type { paths } from './index'; // generated by openapi-typescript
import { useQuery, UseQueryOptions } from '@tanstack/react-query';
import type { FetchResponse } from 'openapi-fetch';
import { useAdminBaseUrl } from '../AdminBaseUrlProvider';
import { adminApi } from './client';

type Options<
  Path extends keyof paths,
  Method extends keyof {
    [PossibleMethod in keyof paths[Path] as paths[Path][PossibleMethod] extends NonNullable<{
      parameters: unknown;
    }>
      ? PossibleMethod
      : never]: paths[Path];
  }
> = Omit<
  UseQueryOptions<
    FetchResponse<paths[Path][Method], {}, 'application/json'>['data'],
    FetchResponse<paths[Path][Method], {}, 'application/json'>['error']
  >,
  'queryFn' | 'queryKey'
>;

export function useListDeployments(options?: Options<'/deployments', 'get'>) {
  const baseUrl = useAdminBaseUrl();

  return useQuery({
    ...adminApi('/deployments', 'get', baseUrl),
    ...options,
  });
}

export function useHealth(options?: Options<'/health', 'get'>) {
  const baseUrl = useAdminBaseUrl();

  return useQuery({
    ...adminApi('/health', 'get', baseUrl),
    ...options,
  });
}
