import type { components } from './index'; // generated by openapi-typescript

export type Deployment =
  components['schemas']['ListDeploymentsResponse']['deployments'][number];
export type DetailedDeployment =
  components['schemas']['DetailedDeploymentResponse'];
export type Revision = components['schemas']['ServiceMetadata']['revision'];
export type Service = components['schemas']['ServiceMetadata'];
export type Handler = components['schemas']['HandlerMetadata'];

export type InvocationComputedStatus2 =
  | 'succeeded'
  | 'failed'
  | 'cancelled'
  | 'killed'
  | 'backing-off'
  | 'running'
  | 'suspended'
  | 'scheduled'
  | 'pending'
  | 'paused'
  | 'ready';

export type RawInvocation = components['schemas']['RawInvocation'];
export type JournalEntry = components['schemas']['JournalEntry'];
export type JournalEntryV2 = components['schemas']['JournalEntryV2'];
export type JournalRawEntry = components['schemas']['JournalRawEntry'];
export type InputJournalEntryType =
  components['schemas']['InputJournalEntryType'];
export type GetStateJournalEntryType =
  components['schemas']['GetStateJournalEntryType'];
export type SetStateJournalEntryType =
  components['schemas']['SetStateJournalEntryType'];
export type GetStateKeysJournalEntryType =
  components['schemas']['GetStateKeysJournalEntryType'];
export type ClearStateJournalEntryType =
  components['schemas']['ClearStateJournalEntryType'];
export type ClearAllStateJournalEntryType =
  components['schemas']['ClearAllStateJournalEntryType'];
export type SleepJournalEntryType =
  components['schemas']['SleepJournalEntryType'];
export type GetPromiseJournalEntryType =
  components['schemas']['GetPromiseJournalEntryType'];
export type PeekPromiseJournalEntryType =
  components['schemas']['PeekPromiseJournalEntryType'];
export type CompletePromiseJournalEntryType =
  components['schemas']['CompletePromiseJournalEntryType'];
export type OneWayCallJournalEntryType =
  components['schemas']['OneWayCallJournalEntryType'];
export type CallJournalEntryType =
  components['schemas']['CallJournalEntryType'];
export type AwakeableJournalEntryType =
  components['schemas']['AwakeableJournalEntryType'];
export type CompleteAwakeableJournalEntryType =
  components['schemas']['CompleteAwakeableJournalEntryType'];
export type RunJournalEntryType = components['schemas']['RunJournalEntryType'];
export type CancelInvocationJournalEntryType =
  components['schemas']['CancelInvocationJournalEntryType'];
export type GetCallInvocationIdJournalEntryType =
  components['schemas']['GetCallInvocationIdJournalEntryType'];
export type AttachInvocationJournalEntryType =
  components['schemas']['AttachInvocationJournalEntryType'];
export type GetInvocationOutputJournalEntryType =
  components['schemas']['GetInvocationOutputJournalEntryType'];
export type CustomJournalEntryType =
  components['schemas']['CustomJournalEntryType'];
export type OutputJournalEntryType =
  components['schemas']['OutputJournalEntryType'];
export type CancelSignalJournalEntryType =
  components['schemas']['CancelSignalJournalEntryType'];
export type EntryType = Exclude<JournalEntry['entry_type'], undefined>;
export type Invocation = components['schemas']['Invocation'];
export type ServiceName = Service['name'];
export type DeploymentId = Deployment['id'];
export type ServiceType = Service['ty'];
export type FilterItem = components['schemas']['FilterItem'];
export type FilterDateItem = components['schemas']['FilterDateItem'];
export type FilterNumberItem = components['schemas']['FilterNumberItem'];
export type FilterNullItem = components['schemas']['FilterNullItem'];
export type FilterStringListItem =
  components['schemas']['FilterStringListItem'];
export type FilterStringItem = components['schemas']['FilterStringItem'];
export type StateResponse = components['schemas']['StateResponse'];

export type HTTPDeployment = Exclude<Deployment, { arn: string }>;
export type LambdaDeployment = Exclude<Deployment, { uri: string }>;
export type DeploymentType = 'uri' | 'arn';
export function isHttpDeployment(
  deployment: Deployment,
): deployment is HTTPDeployment {
  return 'uri' in deployment;
}
export function isLambdaDeployment(
  deployment: Deployment,
): deployment is LambdaDeployment {
  return 'arn' in deployment;
}
export function getEndpoint(deployment?: Deployment) {
  if (!deployment) {
    return undefined;
  }
  if (isHttpDeployment(deployment)) {
    return deployment.uri;
  } else {
    return deployment.arn;
  }
}
export function getProtocolType(deployment?: Deployment) {
  if (!deployment) {
    return undefined;
  }
  if (isHttpDeployment(deployment)) {
    return deployment.protocol_type;
  }
  return 'RequestResponse';
}
