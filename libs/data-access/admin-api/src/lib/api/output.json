{
  "openapi": "3.0.0",
  "info": {
    "title": "Query API",
    "version": "1.1.3"
  },
  "paths": {
    "/services/{service}/state": {
      "post": {
        "tags": ["service"],
        "summary": "Modify a service state",
        "description": "Modify service state",
        "operationId": "modify_service_state",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "Health check",
        "description": "Check REST API Health.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/invocations/{invocation_id}": {
      "delete": {
        "tags": ["invocation"],
        "summary": "Delete an invocation",
        "description": "Delete the given invocation. By default, an invocation is terminated by gracefully cancelling it. This ensures virtual object state consistency. Alternatively, an invocation can be killed which does not guarantee consistency for virtual object instance state, in-flight invocations to other services, etc. A stored completed invocation can also be purged",
        "operationId": "delete_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "If cancel, it will gracefully terminate the invocation. If kill, it will terminate the invocation with a hard stop. If purge, it will only cleanup the response for completed invocations, and leave unaffected an in-flight invocation.",
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/DeletionMode"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/openapi": {
      "get": {
        "tags": ["service"],
        "summary": "Get service OpenAPI",
        "description": "Get the service OpenAPI 3.1 contract.",
        "operationId": "get_service_openapi",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OpenAPI 3.1 of the service",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscription}": {
      "get": {
        "tags": ["subscription"],
        "summary": "Get subscription",
        "description": "Get subscription",
        "operationId": "get_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["subscription"],
        "summary": "Delete subscription",
        "description": "Delete subscription.",
        "operationId": "delete_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": ["subscription"],
        "summary": "List subscriptions",
        "description": "List all subscriptions.",
        "operationId": "list_subscriptions",
        "parameters": [
          {
            "name": "sink",
            "in": "query",
            "description": "Filter by the exact specified sink.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter by the exact specified source.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["subscription"],
        "summary": "Create subscription",
        "description": "Create subscription.",
        "operationId": "create_subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["service"],
        "summary": "List services",
        "description": "List all registered services.",
        "operationId": "list_services",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers/{handler}": {
      "get": {
        "tags": ["service_handler"],
        "summary": "Get service handler",
        "description": "Get the handler of a service",
        "operationId": "get_service_handler",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handler",
            "in": "path",
            "description": "Handler name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandlerMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}": {
      "get": {
        "tags": ["service"],
        "summary": "Get service",
        "description": "Get a registered service.",
        "operationId": "get_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["service"],
        "summary": "Modify a service",
        "description": "Modify a registered service.",
        "operationId": "modify_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": ["version"],
        "summary": "Admin version information",
        "description": "Obtain admin version information.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInformation"
                }
              }
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["deployment"],
        "summary": "List deployments",
        "description": "List all registered deployments.",
        "operationId": "list_deployments",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["deployment"],
        "summary": "Create deployment",
        "description": "Create deployment. Restate will invoke the endpoint to gather additional information required for registration, such as the services exposed by the deployment. If the deployment is already registered, this method will fail unless `force` is set to `true`.",
        "operationId": "create_deployment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers": {
      "get": {
        "tags": ["service_handler"],
        "summary": "List service handlers",
        "description": "List all the handlers of the given service.",
        "operationId": "list_service_handlers",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceHandlersResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment}": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get deployment",
        "description": "Get deployment metadata",
        "operationId": "get_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["deployment"],
        "summary": "Delete deployment",
        "description": "Delete deployment. Currently it's supported to remove a deployment only using the force flag",
        "operationId": "delete_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If true, the deployment will be forcefully deleted. This might break in-flight invocations, use with caution.",
            "style": "simple",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented. Only using the force flag is supported at the moment."
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/openapi": {
      "get": {
        "tags": ["openapi"],
        "summary": "OpenAPI specification",
        "externalDocs": {
          "url": "https://swagger.io/specification/"
        },
        "operationId": "openapi_spec",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "tags": ["query"],
        "summary": "Query journal",
        "description": "Query journal",
        "operationId": "query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["query"],
                "properties": {
                  "query": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "List invocations",
        "description": "List invocations",
        "operationId": "list_invocations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["rows", "total_count"],
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invocation"
                      }
                    },
                    "total_count": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get invocation",
        "description": "Get invocation",
        "operationId": "get_invocation",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invocation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/virtualObjects/{key}/inbox": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get Virtual Object inbox inbox for a key",
        "description": "Get Virtual Object inbox inbox for a key",
        "operationId": "get_inbox",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invocationId",
            "in": "query",
            "description": "Invocation id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ModifyServiceStateRequest": {
        "type": "object",
        "required": ["new_state", "object_key"],
        "properties": {
          "version": {
            "title": "Version",
            "description": "If set, the latest version of the state is compared with this value and the operation will fail when the versions differ.",
            "type": "string",
            "nullable": true
          },
          "object_key": {
            "title": "Service key",
            "description": "To what virtual object key to apply this change",
            "type": "string"
          },
          "new_state": {
            "title": "New State",
            "description": "The new state to replace the previous state with",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              }
            }
          }
        }
      },
      "ErrorDescriptionResponse": {
        "title": "Error description response",
        "description": "Error details of the response",
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string"
          },
          "restate_code": {
            "title": "Restate code",
            "description": "Restate error code describing this error",
            "type": "string",
            "nullable": true
          }
        }
      },
      "DeletionMode": {
        "type": "string",
        "enum": ["Cancel", "Kill", "Purge"]
      },
      "SubscriptionResponse": {
        "type": "object",
        "required": ["id", "options", "sink", "source"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "source": {
            "type": "string"
          },
          "sink": {
            "type": "string"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "String": {
        "type": "string"
      },
      "ListSubscriptionsResponse": {
        "type": "object",
        "required": ["subscriptions"],
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponse"
            }
          }
        }
      },
      "ListServicesResponse": {
        "type": "object",
        "required": ["services"],
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          }
        }
      },
      "ServiceMetadata": {
        "type": "object",
        "required": [
          "deployment_id",
          "handlers",
          "idempotency_retention",
          "name",
          "public",
          "revision",
          "ty"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Fully qualified name of the service",
            "type": "string"
          },
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          },
          "ty": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "deployment_id": {
            "title": "Deployment Id",
            "description": "Deployment exposing the latest revision of the service.",
            "type": "string"
          },
          "revision": {
            "title": "Revision",
            "description": "Latest revision of the service.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "type": "boolean"
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "The retention duration of idempotent requests for this service.",
            "type": "string"
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "The retention duration of workflows. Only available on workflow services.",
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format.\n\nThis overrides the default inactivity timeout set in invoker options.",
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format.\n\nThis overrides the default abort timeout set in invoker options.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "HandlerMetadata": {
        "type": "object",
        "required": ["input_description", "name", "output_description", "ty"],
        "properties": {
          "name": {
            "type": "string"
          },
          "ty": {
            "$ref": "#/components/schemas/HandlerMetadataType"
          },
          "input_description": {
            "title": "Human readable input description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "output_description": {
            "title": "Human readable output description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "input_json_schema": {
            "title": "Input JSON Schema",
            "description": "JSON Schema of the handler input",
            "nullable": true
          },
          "output_json_schema": {
            "title": "Output JSON Schema",
            "description": "JSON Schema of the handler output",
            "nullable": true
          }
        }
      },
      "HandlerMetadataType": {
        "type": "string",
        "enum": ["Exclusive", "Shared", "Workflow"]
      },
      "ServiceType": {
        "type": "string",
        "enum": ["Service", "VirtualObject", "Workflow"]
      },
      "VersionInformation": {
        "type": "object",
        "required": [
          "max_admin_api_version",
          "min_admin_api_version",
          "version"
        ],
        "properties": {
          "version": {
            "title": "Admin server version",
            "description": "Version of the admin server",
            "type": "string"
          },
          "min_admin_api_version": {
            "title": "Min admin API version",
            "description": "Minimum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "max_admin_api_version": {
            "title": "Max admin API version",
            "description": "Maximum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          }
        }
      },
      "ModifyServiceRequest": {
        "type": "object",
        "properties": {
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "type": "boolean",
            "nullable": true
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "Modify the retention of idempotent requests for this service.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.",
            "type": "string",
            "nullable": true
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "Modify the retention of the workflow completion. This can be modified only for workflow services!\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.",
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.\n\nThis overrides the default inactivity timeout set in invoker options.",
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.\n\nThis overrides the default abort timeout set in invoker options.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListDeploymentsResponse": {
        "type": "object",
        "required": ["deployments"],
        "properties": {
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentResponse"
            }
          }
        }
      },
      "DeploymentResponse": {
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "uri",
              "id",
              "services"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/String"
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              },
              "uri": {
                "type": "string"
              },
              "protocol_type": {
                "$ref": "#/components/schemas/ProtocolType"
              },
              "http_version": {
                "type": "string"
              },
              "additional_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "max_protocol_version",
              "min_protocol_version",
              "id",
              "services"
            ],
            "properties": {
              "id": {
                "$ref": "#/components/schemas/String"
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              },
              "arn": {
                "$ref": "#/components/schemas/LambdaARN"
              },
              "assume_role_arn": {
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ServiceNameRevPair": {
        "type": "object",
        "required": ["name", "revision"],
        "properties": {
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "ProtocolType": {
        "type": "string",
        "enum": ["RequestResponse", "BidiStream"]
      },
      "LambdaARN": {
        "type": "string",
        "format": "arn"
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "required": ["sink", "source"],
        "properties": {
          "source": {
            "title": "Source",
            "description": "Source uri. Accepted forms:\n\n* `kafka://<cluster_name>/<topic_name>`, e.g. `kafka://my-cluster/my-topic`",
            "type": "string"
          },
          "sink": {
            "title": "Sink",
            "description": "Sink uri. Accepted forms:\n\n* `service://<service_name>/<service_name>`, e.g. `service://Counter/count`",
            "type": "string"
          },
          "options": {
            "title": "Options",
            "description": "Additional options to apply to the subscription.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ListServiceHandlersResponse": {
        "type": "object",
        "required": ["handlers"],
        "properties": {
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          }
        }
      },
      "RegisterDeploymentRequest": {
        "anyOf": [
          {
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "title": "Uri",
                "description": "Uri to use to discover/invoke the http deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "use_http_11": {
                "title": "Use http1.1",
                "description": "If `true`, discovery will be attempted using a client that defaults to HTTP1.1 instead of a prior-knowledge HTTP2 client. HTTP2 may still be used for TLS servers that advertise HTTP2 support via ALPN. HTTP1.1 deployments will only work in request-response mode.",
                "default": false,
                "type": "boolean"
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it will override, if existing, any deployment using the same `uri`. Beware that this can lead in-flight invocations to an unrecoverable error state.\n\nBy default, this is `true` but it might change in future to `false`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          },
          {
            "type": "object",
            "required": ["arn"],
            "properties": {
              "arn": {
                "title": "ARN",
                "description": "ARN to use to discover/invoke the lambda deployment.",
                "type": "string"
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Optional ARN of a role to assume when invoking the addressed Lambda, to support role chaining",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it will override, if existing, any deployment using the same `uri`. Beware that this can lead in-flight invocations to an unrecoverable error state.\n\nBy default, this is `true` but it might change in future to `false`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RegisterDeploymentResponse": {
        "type": "object",
        "required": ["id", "services"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          }
        }
      },
      "DetailedDeploymentResponse": {
        "type": "object",
        "anyOf": [
          {
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "uri",
              "id",
              "services"
            ],
            "properties": {
              "uri": {
                "type": "string"
              },
              "protocol_type": {
                "$ref": "#/components/schemas/ProtocolType"
              },
              "http_version": {
                "type": "string"
              },
              "additional_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "id": {
                "$ref": "#/components/schemas/String"
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "max_protocol_version",
              "min_protocol_version",
              "id",
              "services"
            ],
            "properties": {
              "arn": {
                "$ref": "#/components/schemas/LambdaARN"
              },
              "assume_role_arn": {
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "type": "integer",
                "format": "int32"
              },
              "id": {
                "$ref": "#/components/schemas/String"
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          }
        ]
      },
      "InboxResponse": {
        "type": "object",
        "required": ["length", "head"],
        "properties": {
          "size": {
            "type": "integer"
          },
          "head": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "Invocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "succeeded",
              "failed",
              "cancelled",
              "killed",
              "retrying",
              "running",
              "suspended",
              "scheduled",
              "pending",
              "ready"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string",
            "enum": ["ingress", "service"]
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          }
        }
      },
      "RawInvocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "scheduled",
              "ready",
              "running",
              "backing-off",
              "suspended",
              "completed"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string",
            "enum": ["ingress", "service"]
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          }
        }
      }
    }
  }
}
