{
  "openapi": "3.0.0",
  "info": {
    "title": "Query API",
    "version": "1.1.3"
  },
  "paths": {
    "/cluster-health": {
      "get": {
        "tags": ["cluster_health"],
        "summary": "Cluster health",
        "description": "Get the cluster health.",
        "operationId": "cluster_health",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHealthResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["deployment"],
        "summary": "List deployments",
        "description": "List all registered deployments.",
        "operationId": "list_deployments",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["deployment"],
        "summary": "Create deployment",
        "description": "Create deployment. Restate will invoke the endpoint to gather additional information required for registration, such as the services exposed by the deployment. If the deployment is already registered, this method will fail unless `force` is set to `true`.",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/registration"
        },
        "operationId": "create_deployment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment}": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get deployment",
        "description": "Get deployment metadata",
        "operationId": "get_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["deployment"],
        "summary": "Update deployment",
        "description": "Update deployment. Invokes the endpoint and replaces the existing deployment metadata with the discovered information. This is a dangerous operation that should be used only when there are failing invocations on the deployment that cannot be resolved any other way. Sense checks are applied to test that the new deployment is sufficiently similar to the old one.",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/versioning"
        },
        "operationId": "update_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["deployment"],
        "summary": "Delete deployment",
        "description": "Delete deployment. Currently it's supported to remove a deployment only using the force flag",
        "operationId": "delete_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If true, the deployment will be forcefully deleted. This might break in-flight invocations, use with caution.",
            "style": "simple",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented. Only using the force flag is supported at the moment."
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "Health check",
        "description": "Check REST API Health.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/invocations/{invocation_id}": {
      "delete": {
        "tags": ["invocation"],
        "summary": "Delete an invocation",
        "description": "Delete the given invocation. By default, an invocation is terminated by gracefully cancelling it. This ensures virtual object state consistency. Alternatively, an invocation can be killed which does not guarantee consistency for virtual object instance state, in-flight invocations to other services, etc. A stored completed invocation can also be purged",
        "operationId": "delete_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "If cancel, it will gracefully terminate the invocation. If kill, it will terminate the invocation with a hard stop. If purge, it will only cleanup the response for completed invocations, and leave unaffected an in-flight invocation.",
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/DeletionMode"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/openapi": {
      "get": {
        "tags": ["openapi"],
        "summary": "OpenAPI specification",
        "externalDocs": {
          "url": "https://swagger.io/specification/"
        },
        "operationId": "openapi_spec",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["service"],
        "summary": "List services",
        "description": "List all registered services.",
        "operationId": "list_services",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}": {
      "get": {
        "tags": ["service"],
        "summary": "Get service",
        "description": "Get a registered service.",
        "operationId": "get_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["service"],
        "summary": "Modify a service",
        "description": "Modify a registered service.",
        "operationId": "modify_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers": {
      "get": {
        "tags": ["service_handler"],
        "summary": "List service handlers",
        "description": "List all the handlers of the given service.",
        "operationId": "list_service_handlers",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceHandlersResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers/{handler}": {
      "get": {
        "tags": ["service_handler"],
        "summary": "Get service handler",
        "description": "Get the handler of a service",
        "operationId": "get_service_handler",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handler",
            "in": "path",
            "description": "Handler name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandlerMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/openapi": {
      "get": {
        "tags": ["service"],
        "summary": "Get service OpenAPI",
        "description": "Get the service OpenAPI 3.1 contract.",
        "operationId": "get_service_openapi",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OpenAPI 3.1 of the service",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/state": {
      "post": {
        "tags": ["service"],
        "summary": "Modify a service state",
        "description": "Modify service state",
        "operationId": "modify_service_state",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": ["subscription"],
        "summary": "List subscriptions",
        "description": "List all subscriptions.",
        "operationId": "list_subscriptions",
        "parameters": [
          {
            "name": "sink",
            "in": "query",
            "description": "Filter by the exact specified sink.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter by the exact specified source.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["subscription"],
        "summary": "Create subscription",
        "description": "Create subscription.",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/invocation#managing-kafka-subscriptions"
        },
        "operationId": "create_subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscription}": {
      "get": {
        "tags": ["subscription"],
        "summary": "Get subscription",
        "description": "Get subscription",
        "operationId": "get_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["subscription"],
        "summary": "Delete subscription",
        "description": "Delete subscription.",
        "operationId": "delete_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": ["version"],
        "summary": "Admin version information",
        "description": "Obtain admin version information.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInformation"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "tags": ["query"],
        "summary": "Query journal",
        "description": "Query journal",
        "operationId": "query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["query"],
                "properties": {
                  "query": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations": {
      "post": {
        "tags": ["query-invocations"],
        "summary": "List invocations",
        "description": "List invocations",
        "operationId": "list_invocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListInvocationsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["rows", "total_count"],
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invocation"
                      }
                    },
                    "total_count": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get invocation",
        "description": "Get invocation",
        "operationId": "get_invocation",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invocation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}/journal": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get invocation journal",
        "description": "Get invocation journal",
        "operationId": "get_invocation_journal",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["entries"],
                  "properties": {
                    "entries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JournalEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/virtualObjects/{name}/keys/{key}/queue": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get Virtual Object inbox inbox for a key",
        "description": "Get Virtual Object inbox inbox for a key",
        "operationId": "get_inbox",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invocationId",
            "in": "query",
            "description": "Invocation id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state/keys": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get state keys",
        "description": "Get state keys",
        "operationId": "get_state_keys",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInterfaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state": {
      "post": {
        "tags": ["list-state"],
        "summary": "List virtual object state",
        "description": "List virtual object state",
        "operationId": "list_virtual_object_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["keys"],
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["objects"],
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StateResponse"
                          },
                          {
                            "type": "object",
                            "required": ["key"],
                            "properties": {
                              "key": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/keys/{key}/state": {
      "get": {
        "tags": ["get-state"],
        "summary": "Get state keys",
        "description": "Get state keys",
        "operationId": "get_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["state"],
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StateResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state/query": {
      "post": {
        "tags": ["query-state"],
        "summary": "Query virtual object state",
        "description": "Query virtual object state",
        "operationId": "query_virtual_object_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListVirtualObjectStateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["keys"],
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ClusterHealthResponse": {
        "type": "object",
        "required": ["cluster_name"],
        "properties": {
          "cluster_name": {
            "description": "Cluster name",
            "type": "string"
          },
          "metadata_cluster_health": {
            "description": "Embedded metadata cluster health if it was enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbeddedMetadataClusterHealth"
              }
            ],
            "nullable": true
          }
        }
      },
      "EmbeddedMetadataClusterHealth": {
        "type": "object",
        "required": ["members"],
        "properties": {
          "members": {
            "description": "Current members of the embedded metadata cluster",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        }
      },
      "ErrorDescriptionResponse": {
        "title": "Error description response",
        "description": "Error details of the response",
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string"
          },
          "restate_code": {
            "title": "Restate code",
            "description": "Restate error code describing this error",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListDeploymentsResponse": {
        "type": "object",
        "required": ["deployments"],
        "properties": {
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentResponse"
            }
          }
        }
      },
      "DeploymentResponse": {
        "anyOf": [
          {
            "title": "HttpDeploymentResponse",
            "description": "Deployment response for HTTP deployments",
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "services",
              "uri"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "uri": {
                "title": "Deployment URI",
                "description": "URI used to invoke this service deployment.",
                "type": "string"
              },
              "protocol_type": {
                "title": "Protocol Type",
                "description": "Protocol type used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProtocolType"
                  }
                ]
              },
              "http_version": {
                "title": "HTTP Version",
                "description": "HTTP Version used to invoke this service deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              }
            }
          },
          {
            "title": "LambdaDeploymentResponse",
            "description": "Deployment response for Lambda deployments",
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "services"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "arn": {
                "title": "Lambda ARN",
                "description": "Lambda ARN used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LambdaARN"
                  }
                ]
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Assume role ARN used to invoke this deployment. Check https://docs.restate.dev/category/aws-lambda for more details.",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              }
            }
          }
        ]
      },
      "String": {
        "type": "string"
      },
      "ProtocolType": {
        "type": "string",
        "enum": ["RequestResponse", "BidiStream"]
      },
      "ServiceNameRevPair": {
        "type": "object",
        "required": ["name", "revision"],
        "properties": {
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "LambdaARN": {
        "type": "string",
        "format": "arn"
      },
      "RegisterDeploymentRequest": {
        "anyOf": [
          {
            "title": "RegisterHttpDeploymentRequest",
            "description": "Register HTTP deployment request",
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "title": "Uri",
                "description": "Uri to use to discover/invoke the http deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "use_http_11": {
                "title": "Use http1.1",
                "description": "If `true`, discovery will be attempted using a client that defaults to HTTP1.1 instead of a prior-knowledge HTTP2 client. HTTP2 may still be used for TLS servers that advertise HTTP2 support via ALPN. HTTP1.1 deployments will only work in request-response mode.",
                "default": false,
                "type": "boolean"
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it will override, if existing, any deployment using the same `uri`. Beware that this can lead in-flight invocations to an unrecoverable error state.\n\nBy default, this is `true` but it might change in future to `false`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          },
          {
            "title": "RegisterLambdaDeploymentRequest",
            "description": "Register Lambda deployment request",
            "type": "object",
            "required": ["arn"],
            "properties": {
              "arn": {
                "title": "ARN",
                "description": "ARN to use to discover/invoke the lambda deployment.",
                "type": "string"
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Optional ARN of a role to assume when invoking the addressed Lambda, to support role chaining",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it will override, if existing, any deployment using the same `uri`. Beware that this can lead in-flight invocations to an unrecoverable error state.\n\nBy default, this is `true` but it might change in future to `false`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RegisterDeploymentResponse": {
        "type": "object",
        "required": ["id", "services"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          },
          "min_protocol_version": {
            "title": "Minimum Service Protocol version",
            "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "max_protocol_version": {
            "title": "Maximum Service Protocol version",
            "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "sdk_version": {
            "title": "SDK version",
            "description": "SDK library and version declared during registration.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ServiceMetadata": {
        "type": "object",
        "required": [
          "deployment_id",
          "handlers",
          "idempotency_retention",
          "name",
          "public",
          "revision",
          "ty"
        ],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Fully qualified name of the service",
            "type": "string"
          },
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          },
          "ty": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "documentation": {
            "title": "Documentation",
            "description": "Documentation of the service, as propagated by the SDKs.",
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "description": "Additional service metadata, as propagated by the SDKs.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "deployment_id": {
            "title": "Deployment Id",
            "description": "Deployment exposing the latest revision of the service.",
            "type": "string"
          },
          "revision": {
            "title": "Revision",
            "description": "Latest revision of the service.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "type": "boolean"
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "The retention duration of idempotent requests for this service.",
            "type": "string"
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "The retention duration of workflows. Only available on workflow services.",
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format.\n\nThis overrides the default inactivity timeout set in invoker options.",
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format.\n\nThis overrides the default abort timeout set in invoker options.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "HandlerMetadata": {
        "type": "object",
        "required": ["input_description", "name", "output_description"],
        "properties": {
          "name": {
            "type": "string"
          },
          "ty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HandlerMetadataType"
              }
            ],
            "nullable": true
          },
          "documentation": {
            "title": "Documentation",
            "description": "Documentation of the handler, as propagated by the SDKs.",
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "description": "Additional handler metadata, as propagated by the SDKs.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "input_description": {
            "title": "Human readable input description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "output_description": {
            "title": "Human readable output description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "input_json_schema": {
            "title": "Input JSON Schema",
            "description": "JSON Schema of the handler input",
            "nullable": true
          },
          "output_json_schema": {
            "title": "Output JSON Schema",
            "description": "JSON Schema of the handler output",
            "nullable": true
          }
        }
      },
      "HandlerMetadataType": {
        "type": "string",
        "enum": ["Exclusive", "Shared", "Workflow"]
      },
      "ServiceType": {
        "type": "string",
        "enum": ["Service", "VirtualObject", "Workflow"]
      },
      "DetailedDeploymentResponse": {
        "anyOf": [
          {
            "title": "HttpDetailedDeploymentResponse",
            "description": "Detailed deployment response for HTTP deployments",
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "services",
              "uri"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "uri": {
                "title": "Deployment URI",
                "description": "URI used to invoke this service deployment.",
                "type": "string"
              },
              "protocol_type": {
                "title": "Protocol Type",
                "description": "Protocol type used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProtocolType"
                  }
                ]
              },
              "http_version": {
                "title": "HTTP Version",
                "description": "HTTP Version used to invoke this service deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          {
            "title": "LambdaDetailedDeploymentResponse",
            "description": "Detailed deployment response for Lambda deployments",
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "services"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "arn": {
                "title": "Lambda ARN",
                "description": "Lambda ARN used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LambdaARN"
                  }
                ]
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Assume role ARN used to invoke this deployment. Check https://docs.restate.dev/category/aws-lambda for more details.",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          }
        ]
      },
      "UpdateDeploymentRequest": {
        "anyOf": [
          {
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "title": "Uri",
                "description": "Uri to use to discover/invoke the http deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "use_http_11": {
                "title": "Use http1.1",
                "description": "If `true`, discovery will be attempted using a client that defaults to HTTP1.1 instead of a prior-knowledge HTTP2 client. HTTP2 may still be used for TLS servers that advertise HTTP2 support via ALPN. HTTP1.1 deployments will only work in request-response mode.",
                "default": false,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          },
          {
            "type": "object",
            "required": ["arn"],
            "properties": {
              "arn": {
                "title": "ARN",
                "description": "ARN to use to discover/invoke the lambda deployment.",
                "type": "string"
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Optional ARN of a role to assume when invoking the addressed Lambda, to support role chaining",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DeletionMode": {
        "type": "string",
        "enum": ["Cancel", "Kill", "Purge"]
      },
      "ListServicesResponse": {
        "type": "object",
        "required": ["services"],
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          }
        }
      },
      "ModifyServiceRequest": {
        "type": "object",
        "properties": {
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "default": null,
            "type": "boolean",
            "nullable": true
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "Modify the retention of idempotent requests for this service.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "Modify the retention of the workflow completion. This can be modified only for workflow services!\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.\n\nThis overrides the default inactivity timeout set in invoker options.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`humantime`](https://docs.rs/humantime/latest/humantime/fn.parse_duration.html) format or the ISO8601.\n\nThis overrides the default abort timeout set in invoker options.",
            "default": null,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListServiceHandlersResponse": {
        "type": "object",
        "required": ["handlers"],
        "properties": {
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          }
        }
      },
      "ModifyServiceStateRequest": {
        "type": "object",
        "required": ["new_state", "object_key"],
        "properties": {
          "version": {
            "title": "Version",
            "description": "If set, the latest version of the state is compared with this value and the operation will fail when the versions differ.",
            "type": "string",
            "nullable": true
          },
          "object_key": {
            "title": "Service key",
            "description": "To what virtual object key to apply this change",
            "type": "string"
          },
          "new_state": {
            "title": "New State",
            "description": "The new state to replace the previous state with",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              }
            }
          }
        }
      },
      "ListSubscriptionsResponse": {
        "type": "object",
        "required": ["subscriptions"],
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponse"
            }
          }
        }
      },
      "SubscriptionResponse": {
        "type": "object",
        "required": ["id", "options", "sink", "source"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "source": {
            "type": "string"
          },
          "sink": {
            "type": "string"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "required": ["sink", "source"],
        "properties": {
          "source": {
            "title": "Source",
            "description": "Source uri. Accepted forms:\n\n* `kafka://<cluster_name>/<topic_name>`, e.g. `kafka://my-cluster/my-topic`",
            "type": "string"
          },
          "sink": {
            "title": "Sink",
            "description": "Sink uri. Accepted forms:\n\n* `service://<service_name>/<service_name>`, e.g. `service://Counter/count`",
            "type": "string"
          },
          "options": {
            "title": "Options",
            "description": "Additional options to apply to the subscription.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "VersionInformation": {
        "type": "object",
        "required": [
          "ingress_endpoint",
          "max_admin_api_version",
          "min_admin_api_version",
          "version"
        ],
        "properties": {
          "version": {
            "title": "Admin server version",
            "description": "Version of the admin server",
            "type": "string"
          },
          "min_admin_api_version": {
            "title": "Min admin API version",
            "description": "Minimum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "max_admin_api_version": {
            "title": "Max admin API version",
            "description": "Maximum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ingress_endpoint": {
            "title": "Ingress endpoint",
            "description": "Ingress endpoint that the Web UI should use to interact with.",
            "type": "string",
            "format": "uri"
          }
        }
      },
      "VirtualObjectState": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "ListInvocationsRequestBody": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItem"
            }
          }
        }
      },
      "ListVirtualObjectStateRequestBody": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItem"
            }
          }
        }
      },
      "FilterItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBaseItem"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterNumberItem"
              },
              {
                "$ref": "#/components/schemas/FilterStringItem"
              },
              {
                "$ref": "#/components/schemas/FilterDateItem"
              },
              {
                "$ref": "#/components/schemas/FilterStringListItem"
              },
              {
                "$ref": "#/components/schemas/FilterNullItem"
              }
            ]
          }
        ]
      },
      "FilterBaseItem": {
        "type": "object",
        "required": ["type", "field"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING", "NUMBER", "DATE", "STRING_LIST", "NULL"]
          },
          "field": {
            "type": "string"
          }
        }
      },
      "FilterNumberItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["NUMBER"]
          },
          "operation": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "GREATER_THAN",
              "LESS_THAN",
              "GREATER_THAN_OR_EQUAL",
              "LESS_THAN_OR_EQUAL"
            ]
          },
          "value": {
            "type": "number"
          }
        }
      },
      "FilterStringItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING"]
          },
          "operation": {
            "type": "string",
            "enum": ["EQUALS", "NOT_EQUALS", "CONTAINS", "NOT_CONTAINS"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterNullItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["NULL"]
          },
          "operation": {
            "type": "string",
            "enum": ["IS", "IS_NOT"]
          }
        }
      },
      "FilterStringListItem": {
        "type": "object",
        "required": ["type", "operation", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING_LIST"]
          },
          "operation": {
            "type": "string",
            "enum": ["IN", "NOT_IN"]
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FilterDateItem": {
        "type": "object",
        "required": ["type", "operation", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["DATE"]
          },
          "operation": {
            "type": "string",
            "enum": ["BEFORE", "AFTER"]
          },
          "value": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StateInterfaceResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "StateResponse": {
        "type": "object",
        "required": ["state"],
        "properties": {
          "state": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "value"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "JournalEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/SetStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetStateKeysJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/ClearStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/ClearAllStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/SleepJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetPromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/PeekPromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CompletePromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/OneWayCallJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CallJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/AwakeableJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CompleteAwakeableJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/RunJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CancelInvocationJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetCallInvocationIdJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/AttachInvocationJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetInvocationOutputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CustomJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/OutputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CancelSignalJournalEntryType"
              }
            ]
          }
        ]
      },
      "JournalRawEntry": {
        "type": "object",
        "required": ["index", "entry_type"],
        "properties": {
          "index": {
            "type": "integer"
          },
          "raw": {
            "type": "string",
            "format": "binary"
          },
          "sleep_wakeup_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "type": "boolean"
          },
          "promise_name": {
            "type": "string"
          },
          "invoked_target": {
            "type": "string"
          },
          "invoked_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "entry_json": {
            "type": "string"
          },
          "appended_at": {
            "type": "string",
            "format": "data-time"
          },
          "version": {
            "type": "integer"
          },
          "entry_type": {
            "type": "string",
            "enum": [
              "Input",
              "Output",
              "GetState",
              "GetEagerState",
              "SetState",
              "GetStateKeys",
              "GetEagerStateKeys",
              "ClearState",
              "ClearAllState",
              "Sleep",
              "GetPromise",
              "PeekPromise",
              "CompletePromise",
              "OneWayCall",
              "Call",
              "Awakeable",
              "CompleteAwakeable",
              "Run",
              "CancelInvocation",
              "GetCallInvocationId",
              "AttachInvocation",
              "GetInvocationOutput",
              "Custom",
              "CancelSignal"
            ]
          }
        }
      },
      "JournalBaseEntry": {
        "type": "object",
        "required": ["index", "entry_type"],
        "properties": {
          "index": {
            "type": "integer"
          },
          "version": {
            "type": "integer"
          },
          "command_index": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "data-time"
          },
          "end": {
            "type": "string",
            "format": "data-time"
          },
          "completed": {
            "type": "boolean"
          }
        }
      },
      "FailureEntry": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "restate_code": {
            "type": "string"
          }
        }
      },
      "CancelSignalJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CancelSignal"]
              }
            }
          }
        ]
      },
      "InputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Input"]
              },
              "body": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "OutputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Output"]
              },
              "body": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "GetStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetState", "GetEagerState"]
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "completed": {
                "type": "boolean"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "SetStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["SetState"]
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GetStateKeysJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetStateKeys", "GetEagerStateKeys"]
              },
              "completed": {
                "type": "boolean"
              },
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "ClearStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["ClearState"]
              }
            }
          }
        ]
      },
      "ClearAllStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["ClearAllState"]
              }
            }
          }
        ]
      },
      "SleepJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "sleep_wakeup_at": {
                "type": "string",
                "format": "data-time"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Sleep"]
              }
            }
          }
        ]
      },
      "GetPromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["GetPromise"]
              },
              "promise_name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "PeekPromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["PeekPromise"]
              },
              "promise_name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "CompletePromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "promise_name": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["CompletePromise"]
              },
              "completion": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "failure": {
                    "$ref": "#/components/schemas/FailureEntry"
                  }
                }
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "OneWayCallJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "invoked_id": {
                "type": "string"
              },
              "invoked_target": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "serviceName": {
                "type": "string"
              },
              "handlerName": {
                "type": "string"
              },
              "parameters": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "invokeTime": {
                "type": "string",
                "format": "date-time"
              },
              "entry_type": {
                "type": "string",
                "enum": ["OneWayCall"]
              }
            }
          }
        ]
      },
      "CallJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "invoked_id": {
                "type": "string"
              },
              "invoked_target": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "key": {
                "type": "string"
              },
              "serviceName": {
                "type": "string"
              },
              "handlerName": {
                "type": "string"
              },
              "parameters": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "value": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Call"]
              }
            }
          }
        ]
      },
      "AwakeableJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Awakeable"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CompleteAwakeableJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CompleteAwakeable"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CancelInvocationJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CancelInvocation"]
              }
            }
          }
        ]
      },
      "GetCallInvocationIdJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["GetCallInvocationId"]
              }
            }
          }
        ]
      },
      "AttachInvocationJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["AttachInvocation"]
              },
              "invocationId": {
                "type": "string"
              }
            }
          }
        ]
      },
      "GetInvocationOutputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetInvocationOutput"]
              }
            }
          }
        ]
      },
      "CustomJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Custom"]
              }
            }
          }
        ]
      },
      "RunJournalEntryType": {
        "type": "object",
        "required": ["name"],
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Run"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "InboxResponse": {
        "type": "object",
        "required": ["length", "head"],
        "properties": {
          "size": {
            "type": "integer"
          },
          "head": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "integer"
        }
      },
      "Invocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string",
            "enum": ["ingress", "service"]
          },
          "status": {
            "type": "string",
            "enum": [
              "succeeded",
              "failed",
              "cancelled",
              "killed",
              "retrying",
              "running",
              "suspended",
              "scheduled",
              "pending",
              "ready"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string"
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "pinned_service_protocol_version": {
            "type": "integer",
            "format": "uint32"
          },
          "journal_commands_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_failure_related_command_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_name": {
            "type": "string"
          },
          "last_failure_related_command_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          }
        }
      },
      "RawInvocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string",
            "enum": ["ingress", "service"]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "scheduled",
              "ready",
              "running",
              "backing-off",
              "suspended",
              "completed"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string"
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "pinned_service_protocol_version": {
            "type": "integer",
            "format": "uint32"
          },
          "journal_commands_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_name": {
            "type": "string"
          },
          "last_failure_related_command_type": {
            "type": "string"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "deployment",
      "description": "Service Deployment management"
    },
    {
      "name": "invocation",
      "description": "Invocation management",
      "externalDocs": {
        "url": "https://docs.restate.dev/operate/invocation"
      }
    },
    {
      "name": "subscription",
      "description": "Subscription management",
      "externalDocs": {
        "url": "https://docs.restate.dev/operate/invocation#managing-kafka-subscriptions"
      }
    },
    {
      "name": "service",
      "description": "Service management"
    },
    {
      "name": "service_handler",
      "description": "Service handlers metadata"
    },
    {
      "name": "cluster_health",
      "description": "Cluster health"
    },
    {
      "name": "health",
      "description": "Admin API health"
    },
    {
      "name": "version",
      "description": "API Version"
    }
  ],
  "externalDocs": {
    "url": "https://docs.restate.dev/operate/"
  }
}
