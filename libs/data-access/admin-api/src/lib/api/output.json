{
  "openapi": "3.0.0",
  "info": {
    "title": "Query API",
    "version": "1.1.3"
  },
  "paths": {
    "/cluster-health": {
      "get": {
        "tags": ["cluster_health"],
        "summary": "Cluster health",
        "description": "Get the cluster health.",
        "operationId": "cluster_health",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterHealthResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "tags": ["deployment"],
        "summary": "List deployments",
        "description": "List all registered deployments.",
        "operationId": "list_deployments",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["deployment"],
        "summary": "Create deployment",
        "description": "Create and register a new deployment. Restate will invoke the endpoint to gather additional information required for registration, such as the services exposed by the deployment. If the deployment is already registered, this method will return 200 and no changes will be made. If the deployment updates some already existing services, schema breaking changes checks will run. If you want to bypass them, use `breaking: true`. To overwrite an already existing deployment, use `force: true`",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/registration"
        },
        "operationId": "create_deployment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Already exists. No change if force = false, overwritten if force = true",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDeploymentResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deployments/{deployment}": {
      "get": {
        "tags": ["deployment"],
        "summary": "Get deployment",
        "description": "Get deployment metadata",
        "operationId": "get_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["deployment"],
        "summary": "Delete deployment",
        "description": "Delete deployment. Currently it's supported to remove a deployment only using the force flag",
        "operationId": "delete_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "If true, the deployment will be forcefully deleted. This might break in-flight invocations, use with caution.",
            "style": "simple",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not implemented. Only using the force flag is supported at the moment."
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["deployment"],
        "summary": "Update deployment",
        "description": "Update an already existing deployment. This lets you update the address and options when invoking the deployment, such as the additional headers for HTTP or the assume role for Lambda. The registered services and handlers won't be overwritten, unless `overwrite: true`.",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/versioning"
        },
        "operationId": "update_deployment",
        "parameters": [
          {
            "name": "deployment",
            "in": "path",
            "description": "Deployment identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeploymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedDeploymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["health"],
        "summary": "Health check",
        "description": "Check REST API Health.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/invocations/{invocation_id}": {
      "delete": {
        "tags": ["invocation"],
        "summary": "Delete an invocation",
        "description": "Use kill_invocation/cancel_invocation/purge_invocation instead.",
        "operationId": "delete_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "If cancel, it will gracefully terminate the invocation. If kill, it will terminate the invocation with a hard stop. If purge, it will only cleanup the response for completed invocations, and leave unaffected an in-flight invocation.",
            "style": "simple",
            "schema": {
              "$ref": "#/components/schemas/DeletionMode"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/invocations/{invocation_id}/cancel": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Cancel an invocation",
        "description": "Cancel the given invocation. Canceling an invocation allows it to free any resources it is holding and roll back any changes it has made so far, running compensation code. For more details, checkout https://docs.restate.dev/guides/sagas",
        "externalDocs": {
          "url": "https://docs.restate.dev/guides/sagas"
        },
        "operationId": "cancel_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The invocation has been cancelled."
          },
          "202": {
            "description": "The cancellation signal was appended to the journal and will be processed by the SDK."
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation was already completed, so it cannot be cancelled nor killed. You can instead purge the invocation, in order for restate to forget it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/kill": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Kill an invocation",
        "description": "Kill the given invocation. This does not guarantee consistency for virtual object instance state, in-flight invocations to other services, etc.",
        "operationId": "kill_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation was already completed, so it cannot be cancelled nor killed. You can instead purge the invocation, in order for restate to forget it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/pause": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Pause an invocation",
        "description": "Pause the given invocation. This applies only to running invocations, and will cause them to eventually pause.",
        "operationId": "pause_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Already paused"
          },
          "202": {
            "description": "Accepted"
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation is not running. An invocation can be paused only when running.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/purge": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Purge an invocation",
        "description": "Purge the given invocation. This cleanups all the state for the given invocation. This command applies only to completed invocations.",
        "operationId": "purge_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation is not yet completed. An invocation can be purged only when completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/purge-journal": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Purge an invocation journal",
        "description": "Purge the given invocation journal. This cleanups only the journal for the given invocation, retaining the metadata. This command applies only to completed invocations.",
        "operationId": "purge_journal",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation is not yet completed. An invocation can be purged only when completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/restart-as-new": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Restart as new invocation",
        "description": "Restart the given invocation as new. This will restart the invocation as a new invocation with a different invocation id. By using the 'from' query parameter, some of the partial progress can be copied over to the new invocation.",
        "operationId": "restart_as_new_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From which entry index the invocation should restart from. By default the invocation restarts from the beginning (equivalent to 'from = 0'), retaining only the input of the original invocation. When greater than 0, the new invocation will copy the old journal prefix up to 'from' included, plus eventual completions for commands in the given prefix. If the journal prefix contains commands that have not been completed, this operation will fail.",
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          {
            "name": "deployment",
            "in": "query",
            "description": "When restarting from journal prefix, provide a deployment id to use to replace the currently pinned deployment id. If 'latest', use the latest deployment id. If 'keep', keeps the pinned deployment id. When not provided, the invocation will resume on latest. Note: this parameter can be used only in combination with 'from'.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartAsNewInvocationResponse"
                }
              }
            }
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "\nThe given journal index is out of range.\nThe given journal prefix contains some Commands without respective Completions.\nThe given deployment was not found.\nThe selected deployment id to restart as new the invocation doesn't support the currently pinned service protocol version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation is still running. An invocation can be restarted only when completed.\nThe invocation is still running or the deployment id is not pinned yet, deployment id cannot be changed. The deployment id can be changed only if the invocation is paused or suspended, and a deployment id is already pinned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "422 Unprocessable Entity": {
            "description": "Restarting the invocation is not supported. Restarting workflows is not supported, and restarting invocations created using the old service protocol.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "410 Gone": {
            "description": "The invocation cannot be restarted because the input is not available. In order to restart an invocation, the journal must be available in order to read the input again. Journal can be retained after completion by enabling journal retention.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "425 Too Early": {
            "description": "The invocation cannot be restarted because it's not running yet, meaning it might have been scheduled or inboxed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invocations/{invocation_id}/resume": {
      "patch": {
        "tags": ["invocation"],
        "summary": "Resume an invocation",
        "description": "Resume the given invocation. In case the invocation is backing-off, this will immediately trigger the retry timer. If the invocation is suspended or paused, this will resume it.",
        "operationId": "resume_invocation",
        "parameters": [
          {
            "name": "invocation_id",
            "in": "path",
            "description": "Invocation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deployment",
            "in": "query",
            "description": "When resuming from paused/suspended, provide a deployment id to use to replace the currently pinned deployment id. If 'latest', use the latest deployment id. If 'keep', keeps the pinned deployment id. When not provided, the invocation will resume on the pinned deployment id. When provided and the invocation is either running, or no deployment is pinned, this operation will fail.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "404 Not Found": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503 Service Unavailable": {
            "description": "Error when routing the request within restate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "400 Bad Request": {
            "description": "\nThe given deployment was not found.\nThe selected deployment id to resume the invocation doesn't support the currently pinned service protocol version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "425 Too Early": {
            "description": "The invocation is either inboxed or scheduled. An invocation can be resumed only when running, paused or suspended.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409 Conflict": {
            "description": "The invocation is completed. An invocation can be resumed only when running, paused or suspended.\nThe invocation is still running or the deployment id is not pinned yet, deployment id cannot be changed. The deployment id can be changed only if the invocation is paused or suspended, and a deployment id is already pinned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/openapi": {
      "get": {
        "tags": ["openapi"],
        "summary": "OpenAPI specification",
        "externalDocs": {
          "url": "https://swagger.io/specification/"
        },
        "operationId": "openapi_spec",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["service"],
        "summary": "List services",
        "description": "List all registered services.",
        "operationId": "list_services",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}": {
      "get": {
        "tags": ["service"],
        "summary": "Get service",
        "description": "Get a registered service.",
        "operationId": "get_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["service"],
        "summary": "Modify a service",
        "description": "Modify a registered service configuration. NOTE: Service re-discovery will update the settings based on the service endpoint configuration.",
        "operationId": "modify_service",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers": {
      "get": {
        "tags": ["service_handler"],
        "summary": "List service handlers",
        "description": "List all the handlers of the given service.",
        "operationId": "list_service_handlers",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceHandlersResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/handlers/{handler}": {
      "get": {
        "tags": ["service_handler"],
        "summary": "Get service handler",
        "description": "Get the handler of a service",
        "operationId": "get_service_handler",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "handler",
            "in": "path",
            "description": "Handler name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandlerMetadata"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/openapi": {
      "get": {
        "tags": ["service"],
        "summary": "Get service OpenAPI",
        "description": "Get the service OpenAPI 3.1 contract.",
        "operationId": "get_service_openapi",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OpenAPI 3.1 of the service",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/services/{service}/state": {
      "post": {
        "tags": ["service"],
        "summary": "Modify a service state",
        "description": "Modify service state",
        "operationId": "modify_service_state",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "description": "Fully qualified service name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServiceStateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": ["subscription"],
        "summary": "List subscriptions",
        "description": "List all subscriptions.",
        "operationId": "list_subscriptions",
        "parameters": [
          {
            "name": "sink",
            "in": "query",
            "description": "Filter by the exact specified sink.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter by the exact specified source.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["subscription"],
        "summary": "Create subscription",
        "description": "Create subscription.",
        "externalDocs": {
          "url": "https://docs.restate.dev/operate/invocation#managing-kafka-subscriptions"
        },
        "operationId": "create_subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscription}": {
      "get": {
        "tags": ["subscription"],
        "summary": "Get subscription",
        "description": "Get subscription",
        "operationId": "get_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["subscription"],
        "summary": "Delete subscription",
        "description": "Delete subscription.",
        "operationId": "delete_subscription",
        "parameters": [
          {
            "name": "subscription",
            "in": "path",
            "description": "Subscription identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": ["version"],
        "summary": "Admin version information",
        "description": "Obtain admin version information.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInformation"
                }
              }
            }
          }
        }
      }
    },
    "/query": {
      "post": {
        "tags": ["query"],
        "summary": "Query journal",
        "description": "Query journal",
        "operationId": "query",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["query"],
                "properties": {
                  "query": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations": {
      "post": {
        "tags": ["query-invocations"],
        "summary": "List invocations",
        "description": "List invocations",
        "operationId": "list_invocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListInvocationsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["rows", "total_count"],
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invocation"
                      }
                    },
                    "total_count": {
                      "type": "integer"
                    },
                    "total_count_lower_bound": {
                      "type": "boolean"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get invocation",
        "description": "Get invocation",
        "operationId": "get_invocation",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invocation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}/journal": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get invocation journal",
        "description": "Get invocation journal",
        "operationId": "get_invocation_journal",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["entries"],
                  "properties": {
                    "entries": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JournalEntry"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/invocations/{invocationId}/journal/{entryIndex}": {
      "get": {
        "tags": ["get-journal-entry"],
        "summary": "Get journal entry",
        "description": "Get journal entry",
        "operationId": "get_journal_entry",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entryIndex",
            "in": "path",
            "description": "Entry index",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JournalEntryV2"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/v2/invocations/{invocationId}": {
      "get": {
        "tags": ["get-invocation"],
        "summary": "Get invocation and journal",
        "description": "Get invocation journal v2",
        "operationId": "get_invocation_journal_v2",
        "parameters": [
          {
            "name": "invocationId",
            "in": "path",
            "description": "Invocation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "journal",
            "in": "query",
            "description": "Should include journal",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Invocation"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "journal": {
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer"
                            },
                            "entries": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/JournalEntryV2"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/virtualObjects/{name}/keys/{key}/queue": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get Virtual Object inbox inbox for a key",
        "description": "Get Virtual Object inbox inbox for a key",
        "operationId": "get_inbox",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invocationId",
            "in": "query",
            "description": "Invocation id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state/keys": {
      "get": {
        "tags": ["query-invocations"],
        "summary": "Get state keys",
        "description": "Get state keys",
        "operationId": "get_state_keys",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInterfaceResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state": {
      "post": {
        "tags": ["list-state"],
        "summary": "List virtual object state",
        "description": "List virtual object state",
        "operationId": "list_virtual_object_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["keys"],
                "properties": {
                  "keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["objects"],
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/StateResponse"
                          },
                          {
                            "type": "object",
                            "required": ["key"],
                            "properties": {
                              "key": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/keys/{key}/state": {
      "get": {
        "tags": ["get-state"],
        "summary": "Get state keys",
        "description": "Get state keys",
        "operationId": "get_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["state"],
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StateResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/query/services/{name}/state/query": {
      "post": {
        "tags": ["query-state"],
        "summary": "Query virtual object state",
        "description": "Query virtual object state",
        "operationId": "query_virtual_object_state",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListVirtualObjectStateRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["keys"],
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDescriptionResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ClusterHealthResponse": {
        "type": "object",
        "required": ["cluster_name"],
        "properties": {
          "cluster_name": {
            "description": "Cluster name",
            "type": "string"
          },
          "metadata_cluster_health": {
            "description": "Embedded metadata cluster health if it was enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbeddedMetadataClusterHealth"
              }
            ],
            "nullable": true
          }
        }
      },
      "EmbeddedMetadataClusterHealth": {
        "type": "object",
        "required": ["members"],
        "properties": {
          "members": {
            "description": "Current members of the embedded metadata cluster",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        }
      },
      "ErrorDescriptionResponse": {
        "title": "Error description response",
        "description": "Error details of the response",
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string"
          },
          "restate_code": {
            "title": "Restate code",
            "description": "Restate error code describing this error",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListDeploymentsResponse": {
        "type": "object",
        "required": ["deployments"],
        "properties": {
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentResponse"
            }
          }
        }
      },
      "DeploymentResponse": {
        "anyOf": [
          {
            "title": "HttpDeploymentResponse",
            "description": "Deployment response for HTTP deployments",
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "services",
              "uri"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "uri": {
                "title": "Deployment URI",
                "description": "URI used to invoke this service deployment.",
                "type": "string"
              },
              "protocol_type": {
                "title": "Protocol Type",
                "description": "Protocol type used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProtocolType"
                  }
                ]
              },
              "http_version": {
                "title": "HTTP Version",
                "description": "HTTP Version used to invoke this service deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              },
              "info": {
                "title": "Info",
                "description": "List of configuration/deprecation information related to this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          {
            "title": "LambdaDeploymentResponse",
            "description": "Deployment response for Lambda deployments",
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "services"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "arn": {
                "title": "Lambda ARN",
                "description": "Lambda ARN used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LambdaARN"
                  }
                ]
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Assume role ARN used to invoke this deployment. Check https://docs.restate.dev/category/aws-lambda for more details.",
                "type": "string",
                "nullable": true
              },
              "compression": {
                "title": "Compression",
                "description": "Compression algorithm used for invoking Lambda.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EndpointLambdaCompression"
                  }
                ],
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceNameRevPair"
                }
              },
              "info": {
                "title": "Info",
                "description": "List of configuration/deprecation information related to this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          }
        ]
      },
      "String": {
        "type": "string"
      },
      "ProtocolType": {
        "type": "string",
        "enum": ["RequestResponse", "BidiStream"]
      },
      "ServiceNameRevPair": {
        "type": "object",
        "required": ["name", "revision"],
        "properties": {
          "name": {
            "type": "string"
          },
          "revision": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        }
      },
      "Info": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string"
          }
        }
      },
      "LambdaARN": {
        "type": "string",
        "format": "arn"
      },
      "EndpointLambdaCompression": {
        "description": "Lambda compression",
        "type": "string",
        "enum": ["Zstd"]
      },
      "RegisterDeploymentRequest": {
        "anyOf": [
          {
            "title": "RegisterHttpDeploymentRequest",
            "description": "Register HTTP deployment request",
            "type": "object",
            "required": ["uri"],
            "properties": {
              "uri": {
                "title": "Uri",
                "description": "Uri to use to discover/invoke the http deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to every discover/invoke request to the deployment.\n\nYou typically want to include here API keys and other tokens required to send requests to deployments.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "use_http_11": {
                "title": "Use http1.1",
                "description": "If `true`, discovery will be attempted using a client that defaults to HTTP1.1 instead of a prior-knowledge HTTP2 client. HTTP2 may still be used for TLS servers that advertise HTTP2 support via ALPN. HTTP1.1 deployments will only work in request-response mode.",
                "default": false,
                "type": "boolean"
              },
              "breaking": {
                "title": "Breaking",
                "description": "If `true`, it allows registering new service revisions with schemas incompatible with previous service revisions, such as changing service type, removing a handler, etc.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": false,
                "type": "boolean"
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it overrides, if existing, any deployment using the same `uri`. Beware that this can lead inflight invocations to an unrecoverable error state.\n\nWhen set to `true`, it implies `breaking = true`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean",
                "nullable": true
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it. `force` and `breaking` will be respected.",
                "default": false,
                "type": "boolean"
              }
            }
          },
          {
            "title": "RegisterLambdaDeploymentRequest",
            "description": "Register Lambda deployment request",
            "type": "object",
            "required": ["arn"],
            "properties": {
              "arn": {
                "title": "ARN",
                "description": "ARN to use to discover/invoke the lambda deployment.",
                "type": "string"
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Optional ARN of a role to assume when invoking the addressed Lambda, to support role chaining",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to every discover/invoke request to the deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "breaking": {
                "title": "Breaking",
                "description": "If `true`, it allows registering new service revisions with schemas incompatible with previous service revisions, such as changing service type, removing a handler, etc.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": false,
                "type": "boolean"
              },
              "force": {
                "title": "Force",
                "description": "If `true`, it overrides, if existing, any deployment using the same `uri`. Beware that this can lead inflight invocations to an unrecoverable error state.\n\nThis implies `breaking = true`.\n\nSee the [versioning documentation](https://docs.restate.dev/operate/versioning) for more information.",
                "default": true,
                "type": "boolean",
                "nullable": true
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it. `force` and `breaking` will be respected.",
                "default": false,
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RegisterDeploymentResponse": {
        "type": "object",
        "required": ["id", "services"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          },
          "min_protocol_version": {
            "title": "Minimum Service Protocol version",
            "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "max_protocol_version": {
            "title": "Maximum Service Protocol version",
            "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
            "default": 0,
            "type": "integer",
            "format": "int32"
          },
          "sdk_version": {
            "title": "SDK version",
            "description": "SDK library and version declared during registration.",
            "type": "string",
            "nullable": true
          },
          "info": {
            "title": "Info",
            "description": "List of configuration/deprecation information related to this deployment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Info"
            }
          }
        }
      },
      "ServiceMetadata": {
        "type": "object",
        "required": ["deployment_id", "handlers", "name", "revision", "ty"],
        "properties": {
          "name": {
            "title": "Name",
            "description": "Fully qualified name of the service",
            "type": "string"
          },
          "ty": {
            "title": "Type",
            "description": "Service type",
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ]
          },
          "handlers": {
            "title": "Handlers",
            "description": "Handlers for this service.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          },
          "documentation": {
            "title": "Documentation",
            "description": "Documentation of the service, as propagated by the SDKs.",
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "description": "Additional service metadata, as propagated by the SDKs.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "deployment_id": {
            "title": "Deployment Id",
            "description": "Deployment exposing the latest revision of the service.",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          },
          "revision": {
            "title": "Revision",
            "description": "Latest revision of the service.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "default": true,
            "type": "boolean"
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "The retention duration of idempotent requests for this service.\n\nIf not configured, this returns the default idempotency retention.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": "1d",
            "type": "string"
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "The retention duration of workflows. Only available on workflow services.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "type": "string",
            "nullable": true
          },
          "journal_retention": {
            "title": "Journal retention",
            "description": "The journal retention. When set, this applies to all requests to all handlers of this service.\n\nIn case the invocation has an idempotency key, the `idempotency_retention` caps the maximum `journal_retention` time. In case the invocation targets a workflow handler, the `workflow_completion_retention` caps the maximum `journal_retention` time.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nIf unset, this returns the default inactivity timeout configured in invoker options.",
            "default": "1m",
            "type": "string"
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nIf unset, this returns the default abort timeout configured in invoker options.",
            "default": "1m",
            "type": "string"
          },
          "enable_lazy_state": {
            "title": "Enable lazy state",
            "description": "If true, lazy state will be enabled for all invocations to this service. This is relevant only for Workflows and Virtual Objects.",
            "default": false,
            "type": "boolean"
          },
          "retry_policy": {
            "title": "Retry policy",
            "description": "Retry policy applied to invocations of this service.\n\nIf unset, it returns the default values configured in the Restate configuration.",
            "default": {
              "exponentiation_factor": 2,
              "initial_interval": "100ms",
              "max_attempts": null,
              "max_interval": null,
              "on_max_attempts": "Pause"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceRetryPolicyMetadata"
              }
            ]
          },
          "info": {
            "title": "Info",
            "description": "List of configuration/deprecation information related to this service.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Info"
            }
          }
        }
      },
      "ServiceType": {
        "type": "string",
        "enum": ["Service", "VirtualObject", "Workflow"]
      },
      "HandlerMetadata": {
        "type": "object",
        "required": ["input_description", "name", "output_description"],
        "properties": {
          "name": {
            "title": "Name",
            "description": "The handler name.",
            "type": "string"
          },
          "ty": {
            "title": "Type",
            "description": "The handler type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/HandlerMetadataType"
              }
            ],
            "nullable": true
          },
          "documentation": {
            "title": "Documentation",
            "description": "Documentation of the handler, as propagated by the SDKs.",
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "description": "Additional handler metadata, as propagated by the SDKs.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "The retention duration of idempotent requests for this handler. If set, it overrides the value set in the service.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "type": "string",
            "nullable": true
          },
          "journal_retention": {
            "title": "Journal retention",
            "description": "The journal retention. When set, this applies to all requests to this handler.\n\nIn case the invocation has an idempotency key, the `idempotency_retention` caps the maximum `journal_retention` time. In case this handler is a workflow handler, the `workflow_completion_retention` caps the maximum `journal_retention` time.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nIf set, it overrides the value set in the service.",
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nIf set, it overrides the value set in the service.",
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nIf set, it overrides the value set in the service.",
            "type": "string",
            "nullable": true
          },
          "enable_lazy_state": {
            "title": "Enable lazy state",
            "description": "If true, lazy state will be enabled for all invocations to this service. This is relevant only for Workflows and Virtual Objects.\n\nIf set, it overrides the value set in the service.",
            "type": "boolean",
            "nullable": true
          },
          "public": {
            "title": "Public",
            "description": "If true, this handler can be invoked through the ingress. If false, this handler can be invoked only from another Restate service.",
            "default": true,
            "type": "boolean"
          },
          "input_description": {
            "title": "Human readable input description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "output_description": {
            "title": "Human readable output description",
            "description": "If empty, no schema was provided by the user at discovery time.",
            "type": "string"
          },
          "input_json_schema": {
            "title": "Input JSON Schema",
            "description": "JSON Schema of the handler input",
            "nullable": true
          },
          "output_json_schema": {
            "title": "Output JSON Schema",
            "description": "JSON Schema of the handler output",
            "nullable": true
          },
          "retry_policy": {
            "title": "Retry policy",
            "description": "Retry policy overrides applied for this handler.",
            "default": {},
            "allOf": [
              {
                "$ref": "#/components/schemas/HandlerRetryPolicyMetadata"
              }
            ]
          },
          "info": {
            "title": "Info",
            "description": "List of configuration/deprecation information related to this handler.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Info"
            }
          }
        }
      },
      "HandlerMetadataType": {
        "type": "string",
        "enum": ["Exclusive", "Shared", "Workflow"]
      },
      "HandlerRetryPolicyMetadata": {
        "title": "Handler retry policy overrides",
        "type": "object",
        "properties": {
          "initial_interval": {
            "title": "Initial Interval",
            "description": "Initial interval for the first retry attempt.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "type": "string",
            "nullable": true
          },
          "exponentiation_factor": {
            "title": "Factor",
            "description": "The factor to use to compute the next retry attempt.",
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "max_attempts": {
            "title": "Max attempts",
            "description": "Number of maximum attempts (including the initial) before giving up. Infinite retries if unset. No retries if set to 1.",
            "type": "integer",
            "format": "uint",
            "minimum": 1,
            "nullable": true
          },
          "max_interval": {
            "title": "Max interval",
            "description": "Maximum interval between retries.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "type": "string",
            "nullable": true
          },
          "on_max_attempts": {
            "title": "On max attempts",
            "description": "Behavior when max attempts are reached.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnMaxAttempts"
              }
            ],
            "nullable": true
          }
        }
      },
      "OnMaxAttempts": {
        "oneOf": [
          {
            "description": "Pause the invocation when max attempts are reached.",
            "type": "string",
            "enum": ["Pause"]
          },
          {
            "description": "Kill the invocation when max attempts are reached.",
            "type": "string",
            "enum": ["Kill"]
          }
        ]
      },
      "ServiceRetryPolicyMetadata": {
        "title": "Service retry policy",
        "type": "object",
        "properties": {
          "initial_interval": {
            "title": "Initial Interval",
            "description": "Initial interval for the first retry attempt.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": "100ms",
            "type": "string"
          },
          "exponentiation_factor": {
            "title": "Factor",
            "description": "The factor to use to compute the next retry attempt. Default: `2.0`.",
            "default": 2,
            "type": "number",
            "format": "float"
          },
          "max_attempts": {
            "title": "Max attempts",
            "description": "Number of maximum attempts (including the initial) before giving up. Infinite retries if unset. No retries if set to 1.",
            "default": null,
            "type": "integer",
            "format": "uint",
            "minimum": 1,
            "nullable": true
          },
          "max_interval": {
            "title": "Max interval",
            "description": "Maximum interval between retries.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "on_max_attempts": {
            "title": "On max attempts",
            "description": "Behavior when max attempts are reached.",
            "default": "Pause",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnMaxAttempts"
              }
            ]
          }
        }
      },
      "DetailedDeploymentResponse": {
        "anyOf": [
          {
            "title": "HttpDetailedDeploymentResponse",
            "description": "Detailed deployment response for HTTP deployments",
            "type": "object",
            "required": [
              "created_at",
              "http_version",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "protocol_type",
              "services",
              "uri"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "uri": {
                "title": "Deployment URI",
                "description": "URI used to invoke this service deployment.",
                "type": "string"
              },
              "protocol_type": {
                "title": "Protocol Type",
                "description": "Protocol type used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProtocolType"
                  }
                ]
              },
              "http_version": {
                "title": "HTTP Version",
                "description": "HTTP Version used to invoke this service deployment.",
                "type": "string"
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              },
              "info": {
                "title": "Info",
                "description": "List of configuration/deprecation information related to this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          },
          {
            "title": "LambdaDetailedDeploymentResponse",
            "description": "Detailed deployment response for Lambda deployments",
            "type": "object",
            "required": [
              "arn",
              "created_at",
              "id",
              "max_protocol_version",
              "min_protocol_version",
              "services"
            ],
            "properties": {
              "id": {
                "title": "Deployment ID",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/String"
                  }
                ]
              },
              "arn": {
                "title": "Lambda ARN",
                "description": "Lambda ARN used to invoke this service deployment.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LambdaARN"
                  }
                ]
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Assume role ARN used to invoke this deployment. Check https://docs.restate.dev/category/aws-lambda for more details.",
                "type": "string",
                "nullable": true
              },
              "compression": {
                "title": "Compression",
                "description": "Compression algorithm used for invoking Lambda.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EndpointLambdaCompression"
                  }
                ],
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers used to invoke this service deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "metadata": {
                "title": "Metadata",
                "description": "Deployment metadata.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "created_at": {
                "type": "string"
              },
              "min_protocol_version": {
                "title": "Minimum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "max_protocol_version": {
                "title": "Maximum Service Protocol version",
                "description": "During registration, the SDKs declare a range from minimum (included) to maximum (included) Service Protocol supported version.",
                "type": "integer",
                "format": "int32"
              },
              "sdk_version": {
                "title": "SDK version",
                "description": "SDK library and version declared during registration.",
                "type": "string",
                "nullable": true
              },
              "services": {
                "title": "Services",
                "description": "List of services exposed by this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceMetadata"
                }
              },
              "info": {
                "title": "Info",
                "description": "List of configuration/deprecation information related to this deployment.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          }
        ]
      },
      "UpdateDeploymentRequest": {
        "anyOf": [
          {
            "title": "UpdateHttpDeploymentRequest",
            "description": "Update HTTP deployment request",
            "type": "object",
            "properties": {
              "uri": {
                "title": "Uri",
                "description": "Uri to use to discover/invoke the http deployment.",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment. When provided, this will overwrite all the headers previously configured for this deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "use_http_11": {
                "title": "Use http1.1",
                "description": "If `true`, discovery will be attempted using a client that defaults to HTTP1.1 instead of a prior-knowledge HTTP2 client. HTTP2 may still be used for TLS servers that advertise HTTP2 support via ALPN. HTTP1.1 deployments will only work in request-response mode.",
                "type": "boolean",
                "nullable": true
              },
              "overwrite": {
                "title": "Overwrite",
                "description": "If `true`, the update will overwrite the schema information, including the exposed service and handlers and service configuration, allowing **breaking changes** too. Use with caution.",
                "default": false,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          },
          {
            "title": "UpdateLambdaDeploymentRequest",
            "description": "Update Lambda deployment request",
            "type": "object",
            "properties": {
              "arn": {
                "title": "ARN",
                "description": "ARN to use to discover/invoke the lambda deployment.",
                "type": "string",
                "nullable": true
              },
              "assume_role_arn": {
                "title": "Assume role ARN",
                "description": "Optional ARN of a role to assume when invoking the addressed Lambda, to support role chaining.",
                "type": "string",
                "nullable": true
              },
              "additional_headers": {
                "title": "Additional headers",
                "description": "Additional headers added to the discover/invoke requests to the deployment. When provided, this will overwrite all the headers previously configured for this deployment.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "nullable": true
              },
              "overwrite": {
                "title": "Overwrite",
                "description": "If `true`, the update will overwrite the schema information, including the exposed service and handlers and service configuration, allowing **breaking changes** too. Use with caution.",
                "default": false,
                "type": "boolean"
              },
              "dry_run": {
                "title": "Dry-run mode",
                "description": "If `true`, discovery will run but the deployment will not be registered. This is useful to see the impact of a new deployment before registering it.",
                "default": false,
                "type": "boolean"
              }
            }
          }
        ]
      },
      "DeletionMode": {
        "type": "string",
        "enum": ["Cancel", "Kill", "Purge"]
      },
      "RestartAsNewInvocationResponse": {
        "type": "object",
        "required": ["new_invocation_id"],
        "properties": {
          "new_invocation_id": {
            "description": "The invocation id of the new invocation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/String"
              }
            ]
          }
        }
      },
      "ListServicesResponse": {
        "type": "object",
        "required": ["services"],
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceMetadata"
            }
          }
        }
      },
      "ModifyServiceRequest": {
        "type": "object",
        "properties": {
          "public": {
            "title": "Public",
            "description": "If true, the service can be invoked through the ingress. If false, the service can be invoked only from another Restate service.",
            "default": null,
            "type": "boolean",
            "nullable": true
          },
          "idempotency_retention": {
            "title": "Idempotency retention",
            "description": "Modify the retention of idempotent requests for this service.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "workflow_completion_retention": {
            "title": "Workflow completion retention",
            "description": "Modify the retention of the workflow completion. This can be modified only for workflow services!\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "journal_retention": {
            "title": "Journal retention",
            "description": "Modify the journal retention for this service. When set, this applies to all requests to all handlers of this service.\n\nIn case the invocation has an idempotency key, the `idempotency_retention` caps the maximum `journal_retention` time. In case the invocation targets a workflow handler, the `workflow_completion_retention` caps the maximum `journal_retention` time.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "inactivity_timeout": {
            "title": "Inactivity timeout",
            "description": "This timer guards against stalled service/handler invocations. Once it expires, Restate triggers a graceful termination by asking the service invocation to suspend (which preserves intermediate progress).\n\nThe 'abort timeout' is used to abort the invocation, in case it doesn't react to the request to suspend.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nThis overrides the default inactivity timeout set in invoker options.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "abort_timeout": {
            "title": "Abort timeout",
            "description": "This timer guards against stalled service/handler invocations that are supposed to terminate. The abort timeout is started after the 'inactivity timeout' has expired and the service/handler invocation has been asked to gracefully terminate. Once the timer expires, it will abort the service/handler invocation.\n\nThis timer potentially **interrupts** user code. If the user code needs longer to gracefully terminate, then this value needs to be set accordingly.\n\nCan be configured using the [`jiff::fmt::friendly`](https://docs.rs/jiff/latest/jiff/fmt/friendly/index.html) format or ISO8601, for example `5 hours`.\n\nThis overrides the default abort timeout set in invoker options.",
            "default": null,
            "type": "string",
            "nullable": true
          }
        }
      },
      "ListServiceHandlersResponse": {
        "type": "object",
        "required": ["handlers"],
        "properties": {
          "handlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HandlerMetadata"
            }
          }
        }
      },
      "ModifyServiceStateRequest": {
        "type": "object",
        "required": ["new_state", "object_key"],
        "properties": {
          "version": {
            "title": "Version",
            "description": "If set, the latest version of the state is compared with this value and the operation will fail when the versions differ.",
            "type": "string",
            "nullable": true
          },
          "object_key": {
            "title": "Service key",
            "description": "To what virtual object key to apply this change",
            "type": "string"
          },
          "new_state": {
            "title": "New State",
            "description": "The new state to replace the previous state with",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0
              }
            }
          }
        }
      },
      "ListSubscriptionsResponse": {
        "type": "object",
        "required": ["subscriptions"],
        "properties": {
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponse"
            }
          }
        }
      },
      "SubscriptionResponse": {
        "type": "object",
        "required": ["id", "options", "sink", "source"],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/String"
          },
          "source": {
            "type": "string"
          },
          "sink": {
            "type": "string"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "required": ["sink", "source"],
        "properties": {
          "source": {
            "title": "Source",
            "description": "Source uri. Accepted forms:\n\n* `kafka://<cluster_name>/<topic_name>`, e.g. `kafka://my-cluster/my-topic`",
            "type": "string"
          },
          "sink": {
            "title": "Sink",
            "description": "Sink uri. Accepted forms:\n\n* `service://<service_name>/<service_name>`, e.g. `service://Counter/count`",
            "type": "string"
          },
          "options": {
            "title": "Options",
            "description": "Additional options to apply to the subscription.",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "VersionInformation": {
        "type": "object",
        "required": [
          "max_admin_api_version",
          "min_admin_api_version",
          "version"
        ],
        "properties": {
          "version": {
            "title": "Admin server version",
            "description": "Version of the admin server",
            "type": "string"
          },
          "min_admin_api_version": {
            "title": "Min admin API version",
            "description": "Minimum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "max_admin_api_version": {
            "title": "Max admin API version",
            "description": "Maximum supported admin API version by the admin server",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "ingress_endpoint": {
            "title": "Ingress endpoint",
            "description": "Ingress endpoint that the Web UI should use to interact with.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdvertisedAddress-http-ingress-server"
              }
            ],
            "nullable": true
          }
        }
      },
      "AdvertisedAddress-http-ingress-server": {
        "title": "advertised address",
        "description": "An externally accessible URI address for http-ingress-server. This can be set to unix:restate-data/ingress.sock to advertise the automatically created unix-socket instead of using tcp if needed",
        "type": "string",
        "example": "http//127.0.0.1:8080/"
      },
      "VirtualObjectState": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "ListInvocationsRequestBody": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItem"
            }
          }
        }
      },
      "ListVirtualObjectStateRequestBody": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterItem"
            }
          }
        }
      },
      "FilterItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilterBaseItem"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FilterNumberItem"
              },
              {
                "$ref": "#/components/schemas/FilterStringItem"
              },
              {
                "$ref": "#/components/schemas/FilterDateItem"
              },
              {
                "$ref": "#/components/schemas/FilterStringListItem"
              },
              {
                "$ref": "#/components/schemas/FilterNullItem"
              }
            ]
          }
        ]
      },
      "FilterBaseItem": {
        "type": "object",
        "required": ["type", "field"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING", "NUMBER", "DATE", "STRING_LIST", "NULL"]
          },
          "field": {
            "type": "string"
          }
        }
      },
      "FilterNumberItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["NUMBER"]
          },
          "operation": {
            "type": "string",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "GREATER_THAN",
              "LESS_THAN",
              "GREATER_THAN_OR_EQUAL",
              "LESS_THAN_OR_EQUAL"
            ]
          },
          "value": {
            "type": "number"
          }
        }
      },
      "FilterStringItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING"]
          },
          "operation": {
            "type": "string",
            "enum": ["EQUALS", "NOT_EQUALS", "CONTAINS", "NOT_CONTAINS"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FilterNullItem": {
        "type": "object",
        "required": ["type", "operation"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["NULL"]
          },
          "operation": {
            "type": "string",
            "enum": ["IS", "IS_NOT"]
          }
        }
      },
      "FilterStringListItem": {
        "type": "object",
        "required": ["type", "operation", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["STRING_LIST"]
          },
          "operation": {
            "type": "string",
            "enum": ["IN", "NOT_IN"]
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FilterDateItem": {
        "type": "object",
        "required": ["type", "operation", "value"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["DATE"]
          },
          "operation": {
            "type": "string",
            "enum": ["BEFORE", "AFTER"]
          },
          "value": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "StateInterfaceResponse": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name"],
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "StateResponse": {
        "type": "object",
        "required": ["state"],
        "properties": {
          "state": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "value"],
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "JournalEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/SetStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetStateKeysJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/ClearStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/ClearAllStateJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/SleepJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetPromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/PeekPromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CompletePromiseJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/OneWayCallJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CallJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/AwakeableJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CompleteAwakeableJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/RunJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CancelInvocationJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetCallInvocationIdJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/AttachInvocationJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/GetInvocationOutputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CustomJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/OutputJournalEntryType"
              },
              {
                "$ref": "#/components/schemas/CancelSignalJournalEntryType"
              }
            ]
          }
        ]
      },
      "JournalEntryV2": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntryV2"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/InputJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/GetStateJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/SetStateJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/GetStateKeysJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/ClearStateJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/ClearAllStateJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CallJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/RunJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/OutputJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationCallJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationCallInvocationIdJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationRunJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/OneWayCallJournalEntryTypeV2"
              },
              {
                "$ref": "#/components/schemas/SleepJournalEntryTypeV2"
              },
              {
                "$ref": "#/components/schemas/NotificationSleepJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CompleteAwakeableJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationCompleteAwakeableJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/AwakeableJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/AttachInvocationJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationAttachInvocationJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CancelJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationCancelJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/GetPromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/PeakPromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CompletePromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationGetPromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationPeakPromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/NotificationCompletePromiseJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/TransientErrorJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CreatedLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/RunningLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/RetryingLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/ScheduledLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/SuspendedLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/PausedLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/PendingLifecycleJournalEntryV2"
              },
              {
                "$ref": "#/components/schemas/CompletionLifecycleJournalEntryV2"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        ]
      },
      "JournalRawEntry": {
        "type": "object",
        "required": ["index", "entry_type"],
        "properties": {
          "index": {
            "type": "integer"
          },
          "raw": {
            "type": "string",
            "format": "binary"
          },
          "sleep_wakeup_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed": {
            "type": "boolean"
          },
          "promise_name": {
            "type": "string"
          },
          "invoked_target": {
            "type": "string"
          },
          "invoked_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "event_json": {
            "type": "string"
          },
          "entry_json": {
            "type": "string"
          },
          "entry_lite_json": {
            "type": "string"
          },
          "appended_at": {
            "type": "string",
            "format": "data-time"
          },
          "version": {
            "type": "integer"
          },
          "event_type": {
            "type": "string"
          },
          "entry_type": {
            "type": "string",
            "enum": [
              "Input",
              "Output",
              "GetState",
              "GetEagerState",
              "SetState",
              "GetStateKeys",
              "GetEagerStateKeys",
              "ClearState",
              "ClearAllState",
              "Sleep",
              "GetPromise",
              "PeekPromise",
              "CompletePromise",
              "OneWayCall",
              "Call",
              "Awakeable",
              "CompleteAwakeable",
              "Run",
              "CancelInvocation",
              "GetCallInvocationId",
              "AttachInvocation",
              "GetInvocationOutput",
              "Custom",
              "Paused",
              "Command: Input",
              "Command: Output",
              "Command: GetState",
              "Command: GetEagerState",
              "Command: SetState",
              "Command: GetStateKeys",
              "Command: GetEagerStateKeys",
              "Command: ClearState",
              "Command: ClearAllState",
              "Command: Sleep",
              "Command: GetPromise",
              "Command: PeekPromise",
              "Command: CompletePromise",
              "Command: OneWayCall",
              "Command: Call",
              "Command: Awakeable",
              "Command: CompleteAwakeable",
              "Command: Run",
              "Command: AttachInvocation",
              "Command: GetInvocationOutput",
              "Command: Custom",
              "Command: SendSignal",
              "Event",
              "Notification: Signal",
              "Notification: Sleep",
              "Notification: Call",
              "Notification: CallInvocationId",
              "Notification: AttachInvocation",
              "Notification: GetPromise",
              "Notification: PeekPromise",
              "Notification: CompletePromise",
              "Notification: Run"
            ]
          }
        }
      },
      "JournalBaseEntry": {
        "type": "object",
        "required": ["index", "entry_type"],
        "properties": {
          "index": {
            "type": "integer"
          },
          "version": {
            "type": "integer"
          },
          "command_index": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "data-time"
          },
          "end": {
            "type": "string",
            "format": "data-time"
          },
          "completed": {
            "type": "boolean"
          }
        }
      },
      "JournalBaseEntryV2": {
        "type": "object",
        "properties": {
          "isPending": {
            "type": "boolean"
          },
          "resultType": {
            "type": "string",
            "enum": ["success", "failure", "void"]
          },
          "isRetrying": {
            "type": "boolean"
          },
          "isLoaded": {
            "type": "boolean"
          },
          "error": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer"
              },
              "code": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              },
              "stack": {
                "type": "string"
              },
              "restateCode": {
                "type": "string"
              }
            }
          },
          "start": {
            "type": "string",
            "format": "datetime"
          },
          "end": {
            "type": "string",
            "format": "datetime"
          },
          "index": {
            "type": "integer"
          },
          "relatedIndexes": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "completionId": {
            "type": "integer"
          },
          "commandIndex": {
            "type": "integer"
          },
          "category": {
            "type": "string",
            "enum": ["notification", "command", "event"]
          },
          "type": {
            "type": "string"
          }
        }
      },
      "FailureEntry": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "restate_code": {
            "type": "string"
          }
        }
      },
      "CancelSignalJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CancelSignal"]
              }
            }
          }
        ]
      },
      "TransientErrorJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["TransientError"]
          },
          "stackTrace": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          },
          "errorCount": {
            "type": "integer"
          },
          "relatedCommandName": {
            "type": "string"
          },
          "relatedCommandType": {
            "type": "string"
          },
          "relatedRestateErrorCode": {
            "type": "string"
          },
          "relatedCommandIndex": {
            "type": "integer"
          }
        }
      },
      "CreatedLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Created"]
          }
        }
      },
      "RunningLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Running"]
          }
        }
      },
      "RetryingLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Retrying"]
          }
        }
      },
      "ScheduledLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Scheduled"]
          }
        }
      },
      "SuspendedLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Suspended"]
          }
        }
      },
      "PausedLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Paused"]
          },
          "stackTrace": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          },
          "relatedCommandName": {
            "type": "string"
          },
          "relatedCommandType": {
            "type": "string"
          },
          "relatedRestateErrorCode": {
            "type": "string"
          },
          "relatedCommandIndex": {
            "type": "integer"
          }
        }
      },
      "PendingLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Pending"]
          }
        }
      },
      "CompletionLifecycleJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["event"]
          },
          "type": {
            "type": "string",
            "enum": ["Completion"]
          }
        }
      },
      "InputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Input"]
              },
              "body": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "InputJournalEntryV2": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "type": {
            "type": "string",
            "enum": ["Input"]
          },
          "handlerName": {
            "type": "string"
          },
          "parameters": {
            "type": "string"
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["key", "value"],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "OutputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Output"]
              },
              "body": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "OutputJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Output"]
          },
          "value": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "GetStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetState", "GetEagerState"]
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "completed": {
                "type": "boolean"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "GetStateJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["GetState", "GetEagerState"]
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "SetStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["SetState"]
              },
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SetStateJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["SetState"]
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "GetStateKeysJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetStateKeys", "GetEagerStateKeys"]
              },
              "completed": {
                "type": "boolean"
              },
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "GetStateKeysJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["GetStateKeys", "GetEagerStateKeys"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ClearStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["ClearState"]
              }
            }
          }
        ]
      },
      "ClearStateJournalEntryV2": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["ClearState"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "ClearAllStateJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["ClearAllState"]
              }
            }
          }
        ]
      },
      "ClearAllStateJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["ClearAllState"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "SleepJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "sleep_wakeup_at": {
                "type": "string",
                "format": "data-time"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Sleep"]
              },
              "name": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SleepJournalEntryTypeV2": {
        "type": "object",
        "properties": {
          "wakeupAt": {
            "type": "string",
            "format": "data-time"
          },
          "type": {
            "type": "string",
            "enum": ["Sleep"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "name": {
            "type": "string"
          }
        }
      },
      "NotificationSleepJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Sleep"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "GetPromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["GetPromise"]
              },
              "promise_name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "GetPromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["GetPromise"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "promiseName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PeakPromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PeekPromise"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "promiseName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "CompletePromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CompletePromise"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "promiseName": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "NotificationGetPromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["GetPromise"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "NotificationPeakPromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["PeekPromise"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "NotificationCompletePromiseJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CompletePromise"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "PeekPromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["PeekPromise"]
              },
              "promise_name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "CompletePromiseJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "promise_name": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["CompletePromise"]
              },
              "completion": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "failure": {
                    "$ref": "#/components/schemas/FailureEntry"
                  }
                }
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              }
            }
          }
        ]
      },
      "OneWayCallJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "invoked_id": {
                "type": "string"
              },
              "invoked_target": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "serviceName": {
                "type": "string"
              },
              "handlerName": {
                "type": "string"
              },
              "parameters": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "invokeTime": {
                "type": "string",
                "format": "date-time"
              },
              "entry_type": {
                "type": "string",
                "enum": ["OneWayCall"]
              }
            }
          }
        ]
      },
      "OneWayCallJournalEntryTypeV2": {
        "type": "object",
        "properties": {
          "invocationId": {
            "type": "string"
          },
          "serviceKey": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "handlerName": {
            "type": "string"
          },
          "parameters": {
            "type": "string"
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["key", "value"],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "invokeTime": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": ["OneWayCall"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "CallJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "invoked_id": {
                "type": "string"
              },
              "invoked_target": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "key": {
                "type": "string"
              },
              "serviceName": {
                "type": "string"
              },
              "handlerName": {
                "type": "string"
              },
              "parameters": {
                "type": "string"
              },
              "headers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["key", "value"],
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "value": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Call"]
              }
            }
          }
        ]
      },
      "CallJournalEntryV2": {
        "type": "object",
        "properties": {
          "invocationId": {
            "type": "string"
          },
          "serviceKey": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "handlerName": {
            "type": "string"
          },
          "parameters": {
            "type": "string"
          },
          "headers": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["key", "value"],
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["Call"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          }
        }
      },
      "NotificationCallJournalEntryV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["Call"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "NotificationCallInvocationIdJournalEntryV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["CallInvocationId"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "NotificationRunJournalEntryV2": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["Run"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "AwakeableJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Awakeable"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AwakeableJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Awakeable"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "CompleteAwakeableJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CompleteAwakeable"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CompleteAwakeableJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CompleteAwakeable"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NotificationCompleteAwakeableJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CompleteAwakeable"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          },
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "NotificationCancelJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Cancel"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          }
        }
      },
      "CancelJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["Cancel"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "invocationId": {
            "type": "string"
          }
        }
      },
      "CancelInvocationJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["CancelInvocation"]
              }
            }
          }
        ]
      },
      "GetCallInvocationIdJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "completed": {
                "type": "boolean"
              },
              "entry_type": {
                "type": "string",
                "enum": ["GetCallInvocationId"]
              }
            }
          }
        ]
      },
      "AttachInvocationJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["AttachInvocation"]
              },
              "invocationId": {
                "type": "string"
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AttachInvocationJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["AttachInvocation"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "invocationId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "NotificationAttachInvocationJournalEntryV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["AttachInvocation"]
          },
          "category": {
            "type": "string",
            "enum": ["notification"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "GetInvocationOutputJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["GetInvocationOutput"]
              }
            }
          }
        ]
      },
      "CustomJournalEntryType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "entry_type": {
                "type": "string",
                "enum": ["Custom"]
              }
            }
          }
        ]
      },
      "RunJournalEntryType": {
        "type": "object",
        "required": ["name"],
        "allOf": [
          {
            "$ref": "#/components/schemas/JournalBaseEntry"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "entry_type": {
                "type": "string",
                "enum": ["Run"]
              },
              "failure": {
                "$ref": "#/components/schemas/FailureEntry"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RunJournalEntryV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["Run"]
          },
          "category": {
            "type": "string",
            "enum": ["command"]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "InboxResponse": {
        "type": "object",
        "required": ["length", "head"],
        "properties": {
          "size": {
            "type": "integer"
          },
          "head": {
            "type": "string"
          }
        },
        "additionalProperties": {
          "type": "integer"
        }
      },
      "Invocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "completion_retention": {
            "type": "string",
            "format": "duration"
          },
          "journal_retention": {
            "type": "string",
            "format": "duration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "created_using_restate_version": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string",
            "enum": ["ingress", "service", "restart_as_new"]
          },
          "restarted_from": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "succeeded",
              "failed",
              "cancelled",
              "killed",
              "running",
              "suspended",
              "scheduled",
              "pending",
              "ready",
              "paused",
              "backing-off"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string"
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "pinned_service_protocol_version": {
            "type": "integer",
            "format": "uint32"
          },
          "journal_commands_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_failure_related_command_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_name": {
            "type": "string"
          },
          "last_failure_related_command_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          },
          "isRetrying": {
            "type": "boolean"
          }
        }
      },
      "RawInvocation": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "modified_at",
          "scheduled_at",
          "invoked_by",
          "status",
          "target",
          "target_handler_name",
          "target_service_name",
          "target_service_ty"
        ],
        "properties": {
          "completion_retention": {
            "type": "string",
            "format": "duration"
          },
          "journal_retention": {
            "type": "string",
            "format": "duration"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_at": {
            "type": "string",
            "format": "date-time"
          },
          "inboxed_at": {
            "type": "string",
            "format": "date-time"
          },
          "scheduled_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "running_at": {
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_start_at": {
            "type": "string",
            "format": "date-time"
          },
          "next_retry_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "invoked_by": {
            "type": "string",
            "enum": ["ingress", "service", "restart_as_new"]
          },
          "restarted_from": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "scheduled",
              "ready",
              "running",
              "backing-off",
              "suspended",
              "completed",
              "paused"
            ]
          },
          "target": {
            "type": "string"
          },
          "target_handler_name": {
            "type": "string"
          },
          "target_service_key": {
            "type": "string"
          },
          "target_service_name": {
            "type": "string"
          },
          "target_service_ty": {
            "type": "string",
            "enum": ["service", "virtual_object", "workflow"]
          },
          "completion_result": {
            "type": "string",
            "enum": ["success", "failure"]
          },
          "completion_failure": {
            "type": "string"
          },
          "invoked_by_service_name": {
            "type": "string"
          },
          "invoked_by_id": {
            "type": "string"
          },
          "invoked_by_target": {
            "type": "string"
          },
          "pinned_deployment_id": {
            "type": "string"
          },
          "trace_id": {
            "type": "string"
          },
          "idempotency_key": {
            "type": "string"
          },
          "journal_size": {
            "type": "integer",
            "format": "uint32"
          },
          "pinned_service_protocol_version": {
            "type": "integer",
            "format": "uint32"
          },
          "journal_commands_size": {
            "type": "integer",
            "format": "uint32"
          },
          "retry_count": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_command_name": {
            "type": "string"
          },
          "last_failure_related_command_type": {
            "type": "string"
          },
          "last_failure_related_entry_index": {
            "type": "integer",
            "format": "uint64"
          },
          "last_failure_related_entry_name": {
            "type": "string"
          },
          "last_failure_related_entry_type": {
            "type": "string"
          },
          "last_attempt_deployment_id": {
            "type": "string"
          },
          "last_attempt_server": {
            "type": "string"
          },
          "last_failure": {
            "type": "string"
          },
          "last_failure_error_code": {
            "type": "string"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "deployment",
      "description": "Service Deployment management"
    },
    {
      "name": "invocation",
      "description": "Invocation management",
      "externalDocs": {
        "url": "https://docs.restate.dev/operate/invocation"
      }
    },
    {
      "name": "subscription",
      "description": "Subscription management",
      "externalDocs": {
        "url": "https://docs.restate.dev/operate/invocation#managing-kafka-subscriptions"
      }
    },
    {
      "name": "service",
      "description": "Service management"
    },
    {
      "name": "service_handler",
      "description": "Service handlers metadata"
    },
    {
      "name": "cluster_health",
      "description": "Cluster health"
    },
    {
      "name": "health",
      "description": "Admin API health"
    },
    {
      "name": "version",
      "description": "API Version"
    }
  ],
  "externalDocs": {
    "url": "https://docs.restate.dev/operate/"
  }
}
