/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/cloud/GetUserIdentity": {
    /** @description Returns the user identity */
    post: operations["getUserIdentity"];
  };
  "/cloud/CreateAccount": {
    /** @description Creates a cloud account */
    post: operations["createAccount"];
  };
  "/cloud/ListAccounts": {
    /** @description returns all cloud accounts the user has access to */
    post: operations["listAccounts"];
  };
  "/cloud/{:accountId}/CreateEnvironment": {
    /** @description Creates an environment */
    post: operations["createEnvironment"];
  };
  "/cloud/{:accountId}/ListEnvironments": {
    /** @description Returns all the environments for an account */
    post: operations["listEnvironments"];
  };
  "/cloud/{:accountId}/CreateApiKey": {
    /** @description Creates an api key on an environment with the specified role */
    post: operations["createApiKey"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    GetUserIdentityResponse: components["schemas"]["User"];
    User: {
      /** @description The user id */
      userId: string;
    };
    Account: {
      /** @description The account id */
      accountId: string;
    };
    Environment: {
      /** @description The environment id */
      environmentId: string;
    };
    CreateAccountResponse: components["schemas"]["Account"];
    ListAccountsResponse: {
      accounts: components["schemas"]["Account"][];
    };
    CreateEnvironmentResponse: components["schemas"]["Environment"];
    ListEnvironmentsResponse: {
      environments: components["schemas"]["Environment"][];
    };
    /** @enum {string} */
    Role: "rst:role::FullAccess";
    /** @enum {string} */
    ApiKeyState: "KEY_ACTIVE";
    CreateApiKeyRequestBody: {
      roleId: components["schemas"]["Role"];
      environmentId: string;
    };
    CreateApiKeyResponse: {
      keyId?: string;
      environmentId: string;
      roleId: components["schemas"]["Role"];
      state: components["schemas"]["ApiKeyState"];
      accountId: string;
      apiKey: string;
    };
  };
  responses: {
    /** @description Access token is missing or invalid */
    UnauthorizedError: {
      content: never;
    };
    /** @description Access token is missing or invalid */
    InternalServerError: {
      content: {
        "text/plain": string;
      };
    };
  };
  parameters: {
    /** @description The account id */
    AccountId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Returns the user identity */
  getUserIdentity: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserIdentityResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Creates a cloud account */
  createAccount: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateAccountResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description returns all cloud accounts the user has access to */
  listAccounts: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListAccountsResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Creates an environment */
  createEnvironment: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEnvironmentResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Returns all the environments for an account */
  listEnvironments: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListEnvironmentsResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** @description Creates an api key on an environment with the specified role */
  createApiKey: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    /** @description Specify the role and environment */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateApiKeyRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateApiKeyResponse"];
        };
      };
      401: components["responses"]["UnauthorizedError"];
      500: components["responses"]["InternalServerError"];
    };
  };
}
